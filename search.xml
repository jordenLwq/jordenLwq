<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>centos7+ 安装mysql</title>
      <link href="/2018/03/22/centos-mysql/"/>
      <content type="html"><![CDATA[<h1 id="CentOS7安装MySQL"><a href="#CentOS7安装MySQL" class="headerlink" title="CentOS7安装MySQL"></a><a href="http://www.cnblogs.com/bigbrotherer/p/7241845.html" target="_blank" rel="external">CentOS7安装MySQL</a></h1><p>  在CentOS中默认安装有MariaDB，这个是MySQL的分支，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。</p><h3 id="1-下载并安装MySQL官方的-Yum-Repository"><a href="#1-下载并安装MySQL官方的-Yum-Repository" class="headerlink" title="1 下载并安装MySQL官方的 Yum Repository"></a>1 下载并安装MySQL官方的 Yum Repository</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</div></pre></td></tr></table></figure><p>  使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# yum -y install mysql57-community-release-el7-10.noarch.rpm</div></pre></td></tr></table></figure><p>  之后就开始安装MySQL服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# yum -y install mysql-community-server</div></pre></td></tr></table></figure><p>  这步可能会花些时间，安装完成后就会覆盖掉之前的mariadb。</p><p><img src="https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726201927328-459165254.png" alt="img"></p><p>至此MySQL就安装完成了，然后是对MySQL的一些设置。</p><h3 id="2-MySQL数据库设置"><a href="#2-MySQL数据库设置" class="headerlink" title="2 MySQL数据库设置"></a>2 MySQL数据库设置</h3><p>  首先启动MySQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# systemctl start  mysqld.service</div></pre></td></tr></table></figure><p>  查看MySQL运行状态，运行状态如图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# systemctl status mysqld.service</div></pre></td></tr></table></figure><p><img src="https://images2017.cnblogs.com/blog/1079354/201707/1079354-20170726202441687-1168874203.png" alt="img"></p><p>  此时MySQL已经开始正常运行，不过要想进入MySQL还得先找出此时root用户的密码，通过如下命令可以在日志文件中找出密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# grep &quot;password&quot; /var/log/mysqld.log</div></pre></td></tr></table></figure><p>用该密码登录到服务端后，必须马上修改密码，不然会报如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select user();</div><div class="line">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.</div></pre></td></tr></table></figure><p>如果只是修改为一个简单的密码，会报以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt;  ALTER USER USER() IDENTIFIED BY &apos;12345678&apos;;</div><div class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</div></pre></td></tr></table></figure><p>这个其实与validate_password_policy的值有关。</p><p>validate_password_policy有以下取值：</p><table><thead><tr><th>Policy</th><th>Tests Performed</th></tr></thead><tbody><tr><td><code>0</code> or <code>LOW</code></td><td>Length</td></tr><tr><td><code>1</code> or <code>MEDIUM</code></td><td>Length; numeric, lowercase/uppercase, and special characters</td></tr><tr><td><code>2</code> or <code>STRONG</code></td><td>Length; numeric, lowercase/uppercase, and special characters; dictionary file</td></tr></tbody></table><p>默认是1，即MEDIUM，所以刚开始设置的密码必须符合长度，且必须含有数字，小写或大写字母，特殊字符。</p><p>有时候，只是为了自己测试，不想密码设置得那么复杂，譬如说，我只想设置root的密码为123456。</p><p>必须修改两个全局参数：</p><p>首先，修改validate_password_policy参数的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set global validate_password_policy=0;</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure><p> 密码的长度是由validate_password_length决定的，而validate_password_length的计算公式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">validate_password_length = validate_password_number_count + validate_password_special_char_count + (2 * validate_password_mixed_case_count)</div></pre></td></tr></table></figure><p>我的是已经修改过的，初始情况下第一个的值是ON，validate_password_length是8。可以通过如下命令修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set global validate_password_policy=0;</div><div class="line">mysql&gt; set global validate_password_length=1;</div></pre></td></tr></table></figure><p>  但此时还有一个问题，就是因为安装了Yum Repository，以后每次yum操作都会自动更新，需要把这个卸载掉：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# yum -y remove mysql57-community-release-el7-10.noarch</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">定时备份mysql</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">db_user=&quot;root&quot;</div><div class="line">db_passwd=&quot;123456&quot;</div><div class="line">db_name=&quot;test_db&quot;</div><div class="line">#进入备份目录将之前的移动到old目录</div><div class="line">cd /mnt/backup/bakmysql</div><div class="line">echo &quot;you are in bakmysql directory now&quot;</div><div class="line">mv test_db* /mnt/backup/bakmysqlold</div><div class="line">echo &quot;Old databases are moved to bakmysqlold folder&quot;</div><div class="line">#备份目录</div><div class="line">backup_dir=&quot;/mnt/backup/bakmysql&quot;</div><div class="line">#时间格式</div><div class="line">time=$(date +&quot;%Y-%m-%d&quot;)</div><div class="line">#mysql 备份的命令，注意有空格和没有空格</div><div class="line">mysqldump -u$db_user -p$db_passwd $db_name  &gt; &quot;$backup_dir/$db_name&quot;-&quot;$time.sql&quot;</div><div class="line">echo &quot;your database backup successfully completed&quot;</div><div class="line">#这里将7天之前的备份文件删掉</div><div class="line">SevenDays=$(date -d -7day  +&quot;%Y-%m-%d&quot;)</div><div class="line">if [ -f /mnt/backup/bakmysqlold/pashanhu-$SevenDays.sql ]</div><div class="line">then</div><div class="line">rm -rf /mnt/backup/bakmysqlold/pashanhu-$SevenDays.sql</div><div class="line">echo &quot;you have delete 7days ago bak sql file &quot;</div><div class="line">else</div><div class="line">echo &quot;7days ago bak sql file not exist &quot;</div><div class="line">echo &quot;bash complete&quot;</div><div class="line">fi</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">er=&quot;root&quot;</div><div class="line">db_passwd=&quot;12345678&quot;</div><div class="line">db_name=&quot;test&quot;</div><div class="line">#进入备份目录将之前的移动到old目录</div><div class="line">cd /var/backup/bakmysql</div><div class="line">echo &quot;you are in bakmysql directory now&quot;</div><div class="line">mv test_db* /var/backup/bakmysqlold</div><div class="line">echo &quot;Old databases are moved to bakmysqlold folder&quot;</div><div class="line">#备份目录</div><div class="line">backup_dir=&quot;/mnt/backup/bakmysql&quot;</div><div class="line">#时间格式</div><div class="line">time=$(date +&quot;%Y-%m-%d&quot;)</div><div class="line">#mysql 备份的命令，注意有空格和没有空格</div><div class="line">#mysqldump -u$db_user -p$db_passwd $db_name  &gt; &quot;$backup_dir/$db_name&quot;-&quot;$time.sql&quot;</div><div class="line">mysqldump --defaults-extra-file=/etc/my.cnf $db_name &gt; &quot;$backup_dir/$db_name&quot;-&quot;$time.sql&quot;</div><div class="line">echo &quot;your database backup successfully completed&quot;</div><div class="line">echo &quot;$backup_dir/$db_name&quot;-&quot;$time.sql&quot;</div><div class="line"></div><div class="line">#这里将7天之前的备份文件删掉</div><div class="line">SevenDays=$(date -d -7day  +&quot;%Y-%m-%d&quot;)</div><div class="line">if [ -f /var/backup/bakmysqlold/pashanhu-$SevenDays.sql ]</div><div class="line">then</div><div class="line">rm -rf /var/backup/bakmysqlold/pashanhu-$SevenDays.sql</div><div class="line">echo &quot;you have delete 7days ago bak sql file &quot;</div><div class="line">else</div><div class="line">echo &quot;7days ago bak sql file not exist &quot;</div><div class="line">echo &quot;bash complete&quot;</div><div class="line">fi</div></pre></td></tr></table></figure><h4 id="然后通过下面命令将脚步加入系统的计划任务"><a href="#然后通过下面命令将脚步加入系统的计划任务" class="headerlink" title="然后通过下面命令将脚步加入系统的计划任务"></a>然后通过下面命令将脚步加入系统的计划任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">crontab -e</div><div class="line"></div><div class="line">0 2 * * * cd /usr/sbin/ &amp;&amp; ./bakmysql.sh</div></pre></td></tr></table></figure><h1 id="解决MySQL5-6出现”Using-a-password-on-the-command-line-interface…”"><a href="#解决MySQL5-6出现”Using-a-password-on-the-command-line-interface…”" class="headerlink" title="解决MySQL5.6出现”Using a password on the command line interface…”"></a>解决MySQL5.6出现”Using a password on the command line interface…”</h1><p>​                                转载                                2016年09月07日 11:17:25            </p><ul><li>标签：</li><li><a href="http://so.csdn.net/so/search/s.do?q=mysql&amp;t=blog" target="_blank" rel="external">mysql</a> /</li><li><a href="http://so.csdn.net/so/search/s.do?q=数据库&amp;t=blog" target="_blank" rel="external">数据库</a> </li></ul><ul><li>​</li></ul><p>今天老左有在帮一个网友搬家网站过程中，习惯导出MySQL数据库的时候采用mysqldump命令，但是意外发生了出现”Warning: Using a password on the command line interface can be insecure.”的错误提示，当然数据库肯定也没有能备份下来。这个问题应该是在<a href="http://www.laozuo.org/tag/mysql5-6" target="_blank" rel="external">MySQL5.6</a>+版本的时候就有出现，可能是为了确保数据库的安全性采用的保护机制。</p><p>遇到问题那就去解决问题，大概搜索到国内的一些网站，大部分都是复制的，也没有讲的明白，于是还是找老外的信息，于是老左就整理到下面比较全的方法且经过验证是没有问题的。</p><p>第一种方法、修改数据库配置文件</p><p>1、我们需要修改数据库配置文件，这个要看我们数据库的配置的，有些是在/etc/my.cnf，有些是/etc/my.conf</p><p><img src="http://www.laozuo.org/wp-content/uploads/2015/08/mysql56-waring-1.jpg" alt="Warning: Using a password on the command line interface can be insecure."></p><p>我们需要在[client]部分添加脚本：</p><blockquote><p>host=localhost<br>user=数据库用户<br>password=’数据库密码’</p></blockquote><p>这里参数要修改成我们自己的。</p><p>2、采用命令导出和导入数据库</p><p>其实在这个时候，我们如果采用”<a href="http://www.laozuo.org/5047.html" target="_blank" rel="external">详解使用mysqldump命令备份还原MySQL数据用法整理</a>“介绍的方法也是可以使用的，虽然依旧有错误提示，但是数据库还是可以导出的。您肯定和老左一样是追求细节的人，一点点问题都不能有，但我们可以用下面的命令导出和导入，就没有错误提示。</p><p>#导出数据库</p><blockquote><p>mysqldump –defaults-extra-file=/etc/my.cnf database &gt; database.sql</p></blockquote><p>#导入数据库</p><blockquote><p>mysql –defaults-extra-file=/etc/my.cnf database &lt; database.sql</p></blockquote><p>这里我们可以看到上面的命令和以前常用的快速导入和导入命令有所不同了，需要加载我们配置的MYSQL配置文件，这个红色部分要根据我们实际的路径修改。用这样的命令导出备份和导入是没有错误提示的。</p><p>第二种方法、利用mysql_config_editor</p><p>1、设置加密模式</p><p>mysql_config_editor set –login-path=local –host=localhost –user=db_user –password</p><p>红色部分是需要修改成我们自己数据库用户名的，回车之后会提示我们输入数据库密码，我们照样输入。</p><p>2、执行备份</p><p>mysqldump -u db_user -pInsecurePassword my_database | gzip &gt; backup.tar.gz</p><p>根据我们数据信息修改用户和用户名和数据库密码，执行备份，这里老左测试还是有错误提示，但数据库是可以备份的。</p><p>总之，我们只要实现结果，可以选择以上2种方法其一操作，当然老左也有看到其他的方法，这里就不多分享了，如果有兴趣的可以搜索其他解决方法。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>基于 CentOS 7 搭建 GitLab</title>
      <link href="/2018/03/22/centos-gitlab/"/>
      <content type="html"><![CDATA[<p>更新软件包<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update -y</div></pre></td></tr></table></figure></p><p>安装 sshd：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y curl policycoreutils-python openssh-server</div></pre></td></tr></table></figure></p><p>启用并启动 sshd：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl enable sshd</div><div class="line"></div><div class="line">systemctl start sshd</div></pre></td></tr></table></figure></p><p>配置防火墙<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">打开 /etc/sysctl.conf 文件，在文件最后添加新的一行并按 Ctrl + S 保存：</div><div class="line"></div><div class="line">net.ipv4.ip_forward = <span class="number">1</span></div></pre></td></tr></table></figure></p><p>启用并启动防火墙：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">systemctl enable firewalld</div><div class="line"></div><div class="line">systemctl start firewalld</div><div class="line"></div><div class="line">firewall-cmd --permanent --add-service=http</div></pre></td></tr></table></figure></p><p>重启防火墙：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">systemctl reload firewalld</div><div class="line"></div><div class="line">在实际使用中，可以使用 systemctl status firewalld 命令查看防火墙的状态。</div></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">安装 postfix</div><div class="line"></div><div class="line">GitLab 需要使用 postfix 来发送邮件。当然，也可以使用 SMTP 服务器，具体步骤请参考 官方教程。</div><div class="line"></div><div class="line">安装：</div><div class="line">yum install -y postfix</div><div class="line"></div><div class="line">打开 /etc/postfix/main.cf 文件，在第 <span class="number">119</span> 行附近找到 inet_protocols = all，将 all 改为 ipv4 并按 Ctrl + S 保存：</div><div class="line"></div><div class="line">inet_protocols = ipv4</div><div class="line"></div><div class="line">启用并启动 postfix：</div><div class="line"></div><div class="line">systemctl enable postfix </div><div class="line"></div><div class="line">systemctl start postfix</div></pre></td></tr></table></figure><p>配置 swap 交换分区<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">由于 GitLab 较为消耗资源，我们需要先创建交换分区，以降低物理内存的压力。</div><div class="line"></div><div class="line">在实际生产环境中，如果服务器配置够高，则不必配置交换分区。</div><div class="line"></div><div class="line">新建 <span class="number">2</span> GB 大小的交换分区：</div><div class="line"></div><div class="line">dd <span class="keyword">if</span>=/dev/zero of=/root/swapfile bs=<span class="number">1</span>M count=<span class="number">2048</span></div><div class="line"></div><div class="line">格式化为交换分区文件并启用：</div><div class="line"></div><div class="line">mkswap /root/swapfile</div><div class="line"></div><div class="line">swapon /root/swapfile</div><div class="line"></div><div class="line">添加自启用。打开 /etc/fstab 文件，在文件最后添加新的一行并按 Ctrl + S 保存：</div><div class="line"></div><div class="line">/root/swapfile swap swap defaults <span class="number">0</span> <span class="number">0</span></div></pre></td></tr></table></figure></p><p>安装 GitLab</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">将软件源修改为国内源</div><div class="line">由于网络环境的原因，将 repo 源修改为 清华大学</div><div class="line">。</div><div class="line">在 /etc/yum.repos.d 目录下新建 gitlab-ce.repo 文件并保存。内容如下：</div><div class="line">gitlab-ce.repo</div><div class="line"></div><div class="line"></div><div class="line">[gitlab-ce]</div><div class="line">name=Gitlab CE Repository</div><div class="line"></div><div class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</div><div class="line"></div><div class="line">gpgcheck=<span class="number">0</span></div><div class="line"></div><div class="line">enabled=<span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">刚才修改过了 yum 源，因此先重新生成缓存：</div><div class="line"></div><div class="line">（此步骤执行时间较长，一般需要 <span class="number">3</span>~<span class="number">5</span> 分钟左右，请耐心等待）</div><div class="line"></div><div class="line">yum makecache</div><div class="line"></div><div class="line">安装 GitLab：</div><div class="line"></div><div class="line">（此步骤执行时间较长，一般需要 <span class="number">3</span>~<span class="number">5</span> 分钟左右，请耐心等待）</div><div class="line"></div><div class="line">yum install -y gitlab-ce</div></pre></td></tr></table></figure><p>初始化 GitLab</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">配置 GitLab 的域名（非必需）</div><div class="line">打开 /etc/gitlab/gitlab.rb 文件，在第 <span class="number">13</span> 行附近找到 external_url <span class="string">'http://gitlab.example.com'</span>，将单引号中的内容改为自己的域名（带上协议头，末尾无斜杠），并按 Ctrl + S 保存。</div><div class="line">例如：</div><div class="line"></div><div class="line">external_url <span class="string">'http://work.myteam.com'</span></div><div class="line"></div><div class="line"></div><div class="line">特别重要！</div><div class="line"></div><div class="line">使用如下命令初始化 GitLab：</div><div class="line"></div><div class="line">（此步骤执行时间较长，一般需要 <span class="number">5</span>~<span class="number">10</span> 分钟左右，请耐心等待）</div><div class="line"></div><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure><p>GitLab 安装已完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">开始使用吧！</div><div class="line">至此，我们已经成功地在 CentOS <span class="number">7</span> 上搭建了 GitLab。 现在可以在这里（http://<span class="number">123.207</span><span class="number">.18</span><span class="number">.222</span>/）访问 GitLab 了。</div><div class="line">    在实际生产中，建议您使用 <span class="number">2</span> 核 <span class="number">4</span> GB 或更高配置的 CVM。点击这里 可以查看 GitLab 官方推荐的配置和可承载人数对应表。</div><div class="line">    再次提醒您，定期执行 yum update -y 以保持各软件包的最新状态。</div><div class="line">谢谢！</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>我对SpringCould理解</title>
      <link href="/2018/03/12/spring-could-my/"/>
      <content type="html"><![CDATA[<p>我对springCould 简单的来说，就是一个微服务基础框架。<br>那什么是微服务基础框架呢？<br>其实就可以看着是微服务服务治理架构的核心内容。<br>主要包括 对微服务生命周期的管理能力。这个能力包括<br>微服务网关。DevOps 和docker 的云集成，安全，负载均衡。服务注册和发现。熔断器 监控等等。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>搭建 WordPress 个人博客</title>
      <link href="/2018/03/09/wordpress/"/>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">搭建 WordPress 个人博客</div><div class="line">准备 LNMP 环境</div><div class="line">任务时间：<span class="number">30</span>min ~ <span class="number">60</span>min</div><div class="line"></div><div class="line">LNMP 是 Linux、Nginx、MySQL 和 PHP 的缩写，是 WordPress 博客系统依赖的基础运行环境。我们先来准备 LNMP 环境</div><div class="line"></div><div class="line">安装 Nginx</div><div class="line">使用 yum 安装 Nginx：</div><div class="line"></div><div class="line">yum install nginx -y</div><div class="line">修改 /etc/nginx/conf.d/default.conf，去除对 IPv6 地址的监听[?]，可参考下面的示例：</div><div class="line"></div><div class="line">示例代码：/etc/nginx/conf.d/default.conf</div><div class="line">server &#123;</div><div class="line">    listen       <span class="number">80</span> default_server;</div><div class="line">    <span class="comment"># listen       [::]:80 default_server;</span></div><div class="line">    server_name  _;</div><div class="line">    root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">    <span class="comment"># Load configuration files for the default server block.</span></div><div class="line">    include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page <span class="number">404</span> /<span class="number">404.</span>html;</div><div class="line">        location = /<span class="number">40</span>x.html &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /<span class="number">50</span>x.html;</div><div class="line">        location = /<span class="number">50</span>x.html &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">修改完成后，启动 Nginx：</div><div class="line"></div><div class="line">nginx</div><div class="line">此时，可访问实验机器外网 HTTP 服务（http://&lt;您的 CVM IP 地址&gt;）来确认是否已经安装成功。</div><div class="line"></div><div class="line">将 Nginx 设置为开机自动启动：</div><div class="line"></div><div class="line">chkconfig nginx on</div><div class="line"></div><div class="line">CentOS <span class="number">6</span> 不支持 IPv6，需要取消对 IPv6 地址的监听，否则 Nginx 不能成功启动。</div><div class="line"></div><div class="line">安装 MySQL</div><div class="line">使用 yum 安装 MySQL：</div><div class="line"></div><div class="line">yum install mysql-server -y</div><div class="line">安装完成后，启动 MySQL 服务：</div><div class="line"></div><div class="line">service mysqld restart</div><div class="line">设置 MySQL 账户 root 密码：[?]</div><div class="line"></div><div class="line">/usr/bin/mysqladmin -u root password <span class="string">'MyPas$word4Word_Press'</span></div><div class="line">将 MySQL 设置为开机自动启动：</div><div class="line"></div><div class="line">chkconfig mysqld on</div><div class="line"></div><div class="line">下面命令中的密码是教程为您自动生成的，为了方便实验的进行，不建议使用其它密码。如果设置其它密码，请把密码记住，在后续的步骤会使用到。</div><div class="line"></div><div class="line">安装 PHP</div><div class="line">使用 yum 安装 PHP：[?]</div><div class="line"></div><div class="line">yum install php-fpm php-mysql -y</div><div class="line">安装之后，启动 PHP-FPM 进程：</div><div class="line"></div><div class="line">service php-fpm start</div><div class="line">启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 [?]</div><div class="line"></div><div class="line">netstat -nlpt | grep php-fpm</div><div class="line">把 PHP-FPM 也设置成开机自动启动：</div><div class="line"></div><div class="line">chkconfig php-fpm on</div><div class="line"></div><div class="line">CentOs <span class="number">6</span> 默认已经安装了 PHP-FPM 及 PHP-MYSQL，下面命令执行的可能会提示已经安装。</div><div class="line"></div><div class="line"></div><div class="line">PHP-FPM 默认监听 <span class="number">9000</span> 端口</div><div class="line"></div><div class="line">安装并配置 WordPress</div><div class="line">任务时间：<span class="number">30</span>min ~ <span class="number">60</span>min</div><div class="line"></div><div class="line">安装 WordPress</div><div class="line">配置好 LNMP 环境后，继续使用 yum 来安装 WordPress：</div><div class="line"></div><div class="line">yum install wordpress -y</div><div class="line">安装完成后，就可以在 /usr/share/wordpress 看到 WordPress 的源代码了。</div><div class="line"></div><div class="line">配置数据库</div><div class="line">进入 MySQL：[?]</div><div class="line"></div><div class="line">mysql -uroot --password=<span class="string">'MyPas$word4Word_Press'</span></div><div class="line">为 WordPress 创建一个数据库：</div><div class="line"></div><div class="line">CREATE DATABASE wordpress;</div><div class="line">MySQL 部分设置完了，我们退出 MySQL 环境：</div><div class="line"></div><div class="line">exit</div><div class="line">把上述的 DB 配置同步到 WordPress 的配置文件中，可参考下面的配置：</div><div class="line"></div><div class="line">示例代码：/etc/wordpress/wp-config.php</div><div class="line">&lt;?php</div><div class="line">/**</div><div class="line"> * The base configuration <span class="keyword">for</span> WordPress</div><div class="line"> *</div><div class="line"> * The wp-config.php creation script uses this file during the</div><div class="line"> * installation. You don<span class="string">'t have to use the web site, you can</span></div><div class="line"><span class="string"> * copy this file to "wp-config.php" and fill in the values.</span></div><div class="line"><span class="string"> *</span></div><div class="line"><span class="string"> * This file contains the following configurations:</span></div><div class="line"><span class="string"> *</span></div><div class="line"><span class="string"> * * MySQL settings</span></div><div class="line"><span class="string"> * * Secret keys</span></div><div class="line"><span class="string"> * * Database table prefix</span></div><div class="line"><span class="string"> * * ABSPATH</span></div><div class="line"><span class="string"> *</span></div><div class="line"><span class="string"> * @link https://codex.wordpress.org/Editing_wp-config.php</span></div><div class="line"><span class="string"> *</span></div><div class="line"><span class="string"> * @package WordPress</span></div><div class="line"><span class="string"> */</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">// ** MySQL settings - You can get this info from your web host ** //</span></div><div class="line"><span class="string">/** The name of the database for WordPress */</span></div><div class="line"><span class="string">define('</span>DB_NAME<span class="string">', '</span>wordpress<span class="string">');</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">/** MySQL database username */</span></div><div class="line"><span class="string">define('</span>DB_USER<span class="string">', '</span>root<span class="string">');</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">/** MySQL database password */</span></div><div class="line"><span class="string">define('</span>DB_PASSWORD<span class="string">', '</span>MyPas$word4Word_Press<span class="string">');</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">/** MySQL hostname */</span></div><div class="line"><span class="string">define('</span>DB_HOST<span class="string">', '</span>localhost<span class="string">');</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">/** Database Charset to use in creating database tables. */</span></div><div class="line"><span class="string">define('</span>DB_CHARSET<span class="string">', '</span>utf8<span class="string">');</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">/** The Database Collate type. Don'</span>t change this <span class="keyword">if</span> <span class="keyword">in</span> doubt. */</div><div class="line">define(<span class="string">'DB_COLLATE'</span>, <span class="string">''</span>);</div><div class="line"></div><div class="line">/**<span class="comment">#@+</span></div><div class="line"> * Authentication Unique Keys <span class="keyword">and</span> Salts.</div><div class="line"> *</div><div class="line"> * Change these to different unique phrases!</div><div class="line"> * You can generate these using the &#123;@link https://api.wordpress.org/secret-key/<span class="number">1.1</span>/salt/ WordPress.org secret-key service&#125;</div><div class="line"> * You can change these at any point <span class="keyword">in</span> time to invalidate all existing cookies. This will force all users to have to log <span class="keyword">in</span> again.</div><div class="line"> *</div><div class="line"> * @since <span class="number">2.6</span><span class="number">.0</span></div><div class="line"> */</div><div class="line">define(<span class="string">'AUTH_KEY'</span>,         <span class="string">'put your unique phrase here'</span>);</div><div class="line">define(<span class="string">'SECURE_AUTH_KEY'</span>,  <span class="string">'put your unique phrase here'</span>);</div><div class="line">define(<span class="string">'LOGGED_IN_KEY'</span>,    <span class="string">'put your unique phrase here'</span>);</div><div class="line">define(<span class="string">'NONCE_KEY'</span>,        <span class="string">'put your unique phrase here'</span>);</div><div class="line">define(<span class="string">'AUTH_SALT'</span>,        <span class="string">'put your unique phrase here'</span>);</div><div class="line">define(<span class="string">'SECURE_AUTH_SALT'</span>, <span class="string">'put your unique phrase here'</span>);</div><div class="line">define(<span class="string">'LOGGED_IN_SALT'</span>,   <span class="string">'put your unique phrase here'</span>);</div><div class="line">define(<span class="string">'NONCE_SALT'</span>,       <span class="string">'put your unique phrase here'</span>);</div><div class="line"></div><div class="line">/**<span class="comment">#@-*/</span></div><div class="line"></div><div class="line">/**</div><div class="line"> * WordPress Database Table prefix.</div><div class="line"> *</div><div class="line"> * You can have multiple installations <span class="keyword">in</span> one database <span class="keyword">if</span> you give each</div><div class="line"> * a unique prefix. Only numbers, letters, <span class="keyword">and</span> underscores please!</div><div class="line"> */</div><div class="line">$table_prefix  = <span class="string">'wp_'</span>;</div><div class="line"></div><div class="line">/**</div><div class="line"> * See http://make.wordpress.org/core/<span class="number">2013</span>/<span class="number">10</span>/<span class="number">25</span>/the-definitive-guide-to-disabling-auto-updates-<span class="keyword">in</span>-wordpress<span class="number">-3</span><span class="number">-7</span></div><div class="line"> */</div><div class="line"></div><div class="line">/* Disable all file change, <span class="keyword">as</span> RPM base installation are read-only */</div><div class="line">define(<span class="string">'DISALLOW_FILE_MODS'</span>, true);</div><div class="line"></div><div class="line">/* Disable automatic updater, <span class="keyword">in</span> case you want to allow</div><div class="line">   above FILE_MODS <span class="keyword">for</span> plugins, themes, ... */</div><div class="line">define(<span class="string">'AUTOMATIC_UPDATER_DISABLED'</span>, true);</div><div class="line"></div><div class="line">/* Core update <span class="keyword">is</span> always disabled, WP_AUTO_UPDATE_CORE value <span class="keyword">is</span> ignore */</div><div class="line"></div><div class="line">/**</div><div class="line"> * For developers: WordPress debugging mode.</div><div class="line"> *</div><div class="line"> * Change this to true to enable the display of notices during development.</div><div class="line"> * It <span class="keyword">is</span> strongly recommended that plugin <span class="keyword">and</span> theme developers use WP_DEBUG</div><div class="line"> * <span class="keyword">in</span> their development environments.</div><div class="line"> *</div><div class="line"> * For information on other constants that can be used <span class="keyword">for</span> debugging,</div><div class="line"> * visit the Codex.</div><div class="line"> *</div><div class="line"> * @link https://codex.wordpress.org/Debugging_in_WordPress</div><div class="line"> */</div><div class="line">define(<span class="string">'WP_DEBUG'</span>, false);</div><div class="line"></div><div class="line">/* That<span class="string">'s all, stop editing! Happy blogging. */</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">/** Absolute path to the WordPress directory. */</span></div><div class="line"><span class="string">if ( !defined('</span>ABSPATH<span class="string">') )</span></div><div class="line"><span class="string">    define('</span>ABSPATH<span class="string">', '</span>/usr/share/wordpress<span class="string">');</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">/** Sets up WordPress vars and included files. */</span></div><div class="line"><span class="string">require_once(ABSPATH . '</span>wp-settings.php<span class="string">');</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">如果你上面的步骤没有使用教程创建的密码，请修改下面命令中的密码登录</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">配置 Nginx</span></div><div class="line"><span class="string">WordPress 已经安装完毕，我们配置 Nginx 把请求转发给 PHP-FPM 来处理</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">首先，重命名默认的配置文件：[?]</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">cd /etc/nginx/conf.d/</span></div><div class="line"><span class="string">mv default.conf defaut.conf.bak</span></div><div class="line"><span class="string">在 /etc/nginx/conf.d 创建 wordpress.conf 配置，参考下面的内容：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">示例代码：/etc/nginx/conf.d/wordpress.conf</span></div><div class="line"><span class="string">server &#123;</span></div><div class="line"><span class="string">    listen 80;</span></div><div class="line"><span class="string">    root /usr/share/wordpress;</span></div><div class="line"><span class="string">    location / &#123;</span></div><div class="line"><span class="string">        index index.php index.html index.htm;</span></div><div class="line"><span class="string">        try_files $uri $uri/ /index.php index.php;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class="line"><span class="string">    location ~ .php$ &#123;</span></div><div class="line"><span class="string">        fastcgi_pass   127.0.0.1:9000;</span></div><div class="line"><span class="string">        fastcgi_index  index.php;</span></div><div class="line"><span class="string">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span></div><div class="line"><span class="string">        include        fastcgi_params;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">配置后，通知 Nginx 进程重新加载：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">nginx -s reload</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">默认的 Server 监听 80 端口，与 WordPress 的服务端口冲突，将其重命名为 .bak 后缀以禁用默认配置</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">准备域名和解析</span></div><div class="line"><span class="string">任务时间：15min ~ 30min</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">如果您还没有域名，可以在腾讯云上选购，过程可以参考下面的视频。</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">视频 - 在腾讯云上购买域名</span></div><div class="line"><span class="string">域名解析</span></div><div class="line"><span class="string">域名购买完成后, 需要将域名解析到实验云主机上，实验云主机的 IP 为：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">视频 - 如何在腾讯云上解析域名</span></div><div class="line"><span class="string">域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 [?]，如：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">ping www.yourdomain.com</span></div><div class="line"><span class="string">如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">注意替换下面命令中的 www.yourmpdomain.com 为您自己的注册的域名</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">大功告成！</span></div><div class="line"><span class="string">恭喜，您的 WordPress 博客已经部署完成，您可以通过浏览器访问博客查看效果。</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">通过IP地址查看：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">博客访问地址：http://&lt;您的域名&gt;/wp-admin/install.php</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">通过域名查看：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">博客访问地址：http://www.yourdomain.com/wp-admin/install.php，其中替换 www.yourdomain.com 为之前申请的域名。</span></div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>redis个人总结</title>
      <link href="/2018/03/08/redis-mianshi/"/>
      <content type="html"><![CDATA[<p>1、什么是Redis？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis 就是一种NOSQL型内存缓存数据库，可以支持redis 集群 主从复制 读写分离，支持大数据量存储，高并发！</div></pre></td></tr></table></figure></p><p>2、redis和memcached的区别是什么？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> 都是内存数据库，redis不仅支持K/V形式，还可以存储 String Map List Set 类型。 memcached 不仅可以存储 String Map List Set 类型 还可以存储 视频 图片等</div><div class="line"><span class="number">2.</span> 都有自己的缓存过期策略。redis 可以使用expired设置 过期时间，memcached 可以 set <span class="number">1008</span> 设置永不过期</div><div class="line"><span class="number">3</span>，都可以做集群和分布式存储。支持一主多从</div><div class="line"><span class="number">4</span>，redis可以设置持久化（rdb和aof）在数据容灾的时候可以通过rdb文件进行数据库恢复，但是memcahed 一但但是memcahed挂掉以后就不能恢复数据了</div><div class="line"><span class="number">5</span>，redis 支持数据备份可以通过 master-slave进行数据备份</div><div class="line"><span class="number">6</span> 应用场景不一样，redis 不仅仅可以做完NOSQL存错数据以外，还要做消息队列。memached适合存储一些SQL语句。数据集，用户的临时性的数据和sessin等。</div></pre></td></tr></table></figure></p><p>3、Redis支持哪几种数据类型？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">存储 String Map List Set</div></pre></td></tr></table></figure><p>4、Redis主要消耗什么物理资源？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">主要消耗物理机的内存和物理磁盘</div></pre></td></tr></table></figure><p>5、为什么Redis需要把所有数据放到内存中？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Redis NOSQL型内存缓存数据库 当然是把所有的数据放到内存，不会redis可以定时进行fsyn操作把数据放到物理磁盘中</div></pre></td></tr></table></figure></p><p>6、Redis集群方案应该怎么做？都有哪些方案？<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="number">1</span>、 redis Cluster  集群</div><div class="line">    其实redis官方的方案就是，一个master node 配置多个slave node 然后通过 redis 哨兵集群 监控redis master </div><div class="line">    存储的key是根据 CRC16 <span class="number">16384</span>取模 ，每一个redis slave  node 都会分担<span class="number">16384</span> 个solt 的一部分。 也就是说，</div><div class="line">    每一个slave node 都会处理对应分配的 solt 。如果当redis slave node 添加或者减少 会重新分配每一个redis slave node 的solt。 </div><div class="line">    当redis master node 挂掉以后 这个redis 哨兵集群会选出一个redis 哨兵，然后通过选出来的这个redis 哨兵来 </div><div class="line">    选出一个redis master node</div><div class="line">    <span class="number">2</span>、 redis Shareding 集群</div><div class="line"></div><div class="line">不了解。哈哈</div></pre></td></tr></table></figure></p><p>7、Redis集群方案什么情况下会导致整个集群不可用？</p><pre><code class="python"><span class="number">1.</span> 假设   在多台物理机集群的时候， 假设 redis master 部署在server<span class="number">-1</span> 和redis 哨兵集群 部署 在 server<span class="number">-2</span>         其他的redis slave node 部署在 server<span class="number">-3</span> server<span class="number">-4</span> server<span class="number">-5</span> server<span class="number">-6</span> ....        这个时候  server<span class="number">-1</span>   server<span class="number">-2</span>  之间的网络断了 ping 不通了，这个时候 redis 哨兵 就会觉得redis master 死掉了      其实redis master 没有死掉。于此，redis 哨兵就会选举一个新的master node ，这个时候导致redis 集群有两个master     导致集群数据不可用 <span class="number">2.</span>断电。 <span class="number">3</span> .。。。</code></pre><p>8、Redis提供了哪几种持久化方式？</p><pre><code class="python">AOF 和rdb如何 AOF和rdb 同时配置 优先是AOF</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>redis 主从架构配置（水平扩展）</title>
      <link href="/2018/01/27/redis-slave-slave/"/>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis 主从架构配置（水平扩展）</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">准备redis环境</div><div class="line">  1，prel</div><div class="line">  2，192.168.58.01 （master） 198.168.58.02（slave 01)  198.168.58.02（slave 02)  </div><div class="line">  3，redis端口都是6379 部署到三台物理机上面。（或者docker run 三个redis 服务器 端口不同就行了，）</div></pre></td></tr></table></figure>  <figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">redis master 必须开启 RDB 和AOF 持久化。 </div><div class="line">redis默认开启是RDB</div><div class="line">开启AOF appendonly yes aof 策略 fsynexec</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">198.168.58.02 redis slave</div><div class="line">改redis.conf </div><div class="line">slaveof &lt;master&gt; &lt;port&gt;</div><div class="line">改为 198.168.52.01 6379</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">198.168.58.03 redis slave</div><div class="line">改redis.conf </div><div class="line">slaveof &lt;master&gt; &lt;port </div><div class="line">改为 198.168.52.01 6379</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">在部署在redis master的物理机上面测试</div><div class="line">redis-cli</div><div class="line">执行info 出现</div><div class="line"></div><div class="line"></div><div class="line"># Replication</div><div class="line">role:master</div><div class="line">connected_slaves:2</div><div class="line">slave0:ip=192.168.68.01,port=6379,state=online,offset=8892,lag=0</div><div class="line">slave1:ip=192.168.68.02,port=6379,state=online,offset=8892,lag=0</div><div class="line">master_repl_offset:8892</div><div class="line">repl_backlog_active:1</div><div class="line">repl_backlog_size:1048576</div><div class="line">repl_backlog_first_byte_offset:2</div><div class="line">repl_backlog_histlen:8891</div><div class="line"></div><div class="line">可见两个slave 分别为 slave01 slave02</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">在部署在redis slave的物理机上面测试</div><div class="line">redis-cli</div><div class="line">执行info 出现</div><div class="line"></div><div class="line"></div><div class="line"># Replication</div><div class="line">role:slave</div><div class="line">master_host:192.168.58.01</div><div class="line">master_port:6379</div><div class="line">master_link_status:up</div><div class="line">master_last_io_seconds_ago:10</div><div class="line">master_sync_in_progress:0</div><div class="line">slave_repl_offset:9102</div><div class="line">slave_priority:100</div><div class="line">slave_read_only:1</div><div class="line">connected_slaves:0</div><div class="line">master_repl_offset:0</div><div class="line">repl_backlog_active:0</div><div class="line">repl_backlog_size:1048576</div><div class="line">repl_backlog_first_byte_offset:0</div><div class="line">repl_backlog_histlen:0</div><div class="line"></div><div class="line">可见次角色为slave master主机为192.168.58.01 端口6379</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">至此，redis 主从架构实现。可支撑 10w+ QPS</div><div class="line"></div><div class="line">Thanks Look !!!</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>生成环境redis启动方案</title>
      <link href="/2018/01/24/redis-start/"/>
      <content type="html"><![CDATA[<p>​                           </p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">安装redis依赖包</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum clean all</div><div class="line"></div><div class="line">yum makecache</div><div class="line"></div><div class="line">yum install wget</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">安装TCL依赖</div><div class="line"></div><div class="line">wget http://downloads.sourceforge.net/tcl/tcl8<span class="number">.6</span><span class="number">.1</span>-src.tar.gz</div><div class="line">tar -xzvf tcl8<span class="number">.6</span><span class="number">.1</span>-src.tar.gz</div><div class="line">cd  /usr/local/tcl8<span class="number">.6</span><span class="number">.1</span>/unix/</div><div class="line">./configure  </div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">安装 perl</div><div class="line">（为什么要装perl？ java+nginx+lua，需要perl。perl，是一个基础的编程语言的安装，tomcat，跑java web应用）</div><div class="line">yum install -y gcc</div><div class="line">wget http://www.cpan.org/src/<span class="number">5.0</span>/perl<span class="number">-5.16</span><span class="number">.1</span>.tar.gz</div><div class="line">tar -xzf perl<span class="number">-5.16</span><span class="number">.1</span>.tar.gz</div><div class="line">cd perl<span class="number">-5.16</span><span class="number">.1</span></div><div class="line">./Configure -des -Dprefix=/usr/local/perl</div><div class="line">make &amp;&amp; make test &amp;&amp; make install</div><div class="line">perl -v</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">安装redis</div><div class="line">使用redis<span class="number">-3.2</span><span class="number">.8</span>.tar.gz</div><div class="line">tar -zxvf redis<span class="number">-3.2</span><span class="number">.8</span>.tar.gz</div><div class="line">cd redis<span class="number">-3.2</span><span class="number">.8</span></div><div class="line">make &amp;&amp; make test &amp;&amp; make install</div><div class="line"></div><div class="line">redis的生产环境启动方案</div><div class="line">要把redis作为一个系统的daemon进程去运行的，每次系统启动，redis进程一起启动</div><div class="line"></div><div class="line">（<span class="number">1</span>）redis utils目录下，有个redis_init_script脚本</div><div class="line"></div><div class="line">（<span class="number">2</span>）将redis_init_script脚本拷贝到linux的/etc/init.d目录中，将redis_init_script重命名为redis_6379，<span class="number">6379</span>是我们希望这个redis实例监听的端口号</div><div class="line"></div><div class="line">（<span class="number">3</span>）修改redis_6379脚本的第<span class="number">6</span>行的REDISPORT，设置为相同的端口号（默认就是<span class="number">6379</span>）</div><div class="line"></div><div class="line">（<span class="number">4</span>）创建两个目录：/etc/redis（存放redis的配置文件），/var/redis/<span class="number">6379</span>（存放redis的持久化文件）</div><div class="line"></div><div class="line">（<span class="number">5</span>）修改redis配置文件（默认在根目录下，redis.conf），拷贝到/etc/redis目录中，修改名称为<span class="number">6379.</span>conf</div><div class="line"></div><div class="line">（<span class="number">6</span>）修改redis.conf中的部分配置为生产环境</div><div class="line"></div><div class="line">daemonizeyes让redis以daemon进程运行</div><div class="line"></div><div class="line">pidfile/var/run/redis_6379.pid 设置redis的pid文件位置</div><div class="line"></div><div class="line">port<span class="number">6379</span>设置redis的监听端口号</div><div class="line"></div><div class="line">dir /var/redis/<span class="number">6379</span>设置持久化文件的存储位置</div><div class="line"></div><div class="line">（<span class="number">7</span>）启动redis，执行cd /etc/init.d, chmod <span class="number">777</span> redis_6379，./redis_6379 start</div><div class="line"></div><div class="line">（<span class="number">8</span>）确认redis进程是否启动，ps -ef | grep redis</div><div class="line"></div><div class="line">（<span class="number">9</span>）让redis跟随系统启动自动启动</div><div class="line"></div><div class="line">在redis_6379脚本中，最上面，加入两行注释</div><div class="line"><span class="comment">#chkconfig:   2345 90 10</span></div><div class="line"><span class="comment">#description:  Redis is a persistent key-value database</span></div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于SpringBoot打包war文件部署到Tomcat</title>
      <link href="/2018/01/16/springboot-war/"/>
      <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">添加 pom插件</div><div class="line"> &lt;finalName&gt;jorden&lt;/finalName&gt;</div><div class="line"></div><div class="line"> &lt;plugins&gt;</div><div class="line">            &lt;!-- maven打包的时候告诉maven不需要web.xml,否刚会报找不到web.xml错误 --&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</div><div class="line">                &lt;version&gt;2.4&lt;/version&gt;</div><div class="line">                &lt;configuration&gt;</div><div class="line">                    &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;</div><div class="line">                &lt;/configuration&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">添加 pom依赖</div><div class="line"> &lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</div><div class="line">&lt;!--&lt;scope&gt;provided&lt;/scope&gt; --&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">更改启动类</div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@MapperScan(basePackages = "com.jorden.li.dao")</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableRabbit</span></div><div class="line">public class ApplicationStart extends SpringBootServletInitializer &#123;</div><div class="line"></div><div class="line">//jar启动</div><div class="line"><span class="meta">@Override  </span></div><div class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;  </div><div class="line">        <span class="keyword">return</span> application.sources(ApplicationStart.<span class="keyword">class</span>);  </div><div class="line">   &#125; </div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(ApplicationStart.<span class="keyword">class</span>, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="进入项目跟目录。运行：mvn-clean-package-spring-boot-repackage-会出现war文件，直接放到tomcat里面就好。"><a href="#进入项目跟目录。运行：mvn-clean-package-spring-boot-repackage-会出现war文件，直接放到tomcat里面就好。" class="headerlink" title="进入项目跟目录。运行：mvn clean package spring-boot:repackage 会出现war文件，直接放到tomcat里面就好。"></a>进入项目跟目录。运行：mvn clean package spring-boot:repackage 会出现war文件，直接放到tomcat里面就好。</h2>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Docker配置mysql主从配置</title>
      <link href="/2017/12/20/docker-mysql-slave/"/>
      <content type="html"><![CDATA[<p> 一： 注意事项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* 一，mysql版本必须相同</div><div class="line">* 二 ，互相ping通</div><div class="line">* 三， 同一操作系统</div></pre></td></tr></table></figure><p>docker 安装mysql<br> 方法一<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">创建Dockerfile</div><div class="line">首先，创建目录mysql,用于存放后面的相关东西。</div><div class="line">mkdir -p ~/mysql/data ~/mysql/logs ~/mysql/conf</div><div class="line"></div><div class="line">data目录将映射为mysql容器配置的数据文件存放路径</div><div class="line"></div><div class="line">logs目录将映射为mysql容器的日志目录</div><div class="line"></div><div class="line">conf目录里的配置文件将映射为mysql容器的配置文件</div><div class="line"></div><div class="line">进入创建的mysql目录，创建Dockerfile</div></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">Dockerfile示例</div><div class="line"></div><div class="line">FROM debian:jessie</div><div class="line"></div><div class="line"><span class="comment"># add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added</span></div><div class="line">RUN groupadd -r mysql &amp;&amp; useradd -r -g mysql mysql</div><div class="line"></div><div class="line"><span class="comment"># add gosu for easy step-down from root</span></div><div class="line">ENV GOSU_VERSION <span class="number">1.7</span></div><div class="line">RUN set -x \</div><div class="line">    &amp;&amp; apt-get update &amp;&amp; apt-get install -y --no-install-recommends ca-certificates wget &amp;&amp; rm -rf /var/lib/apt/lists/* \</div><div class="line">    &amp;&amp; wget -O /usr/local/bin/gosu <span class="string">"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture)"</span> \</div><div class="line">    &amp;&amp; wget -O /usr/local/bin/gosu.asc <span class="string">"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$(dpkg --print-architecture).asc"</span> \</div><div class="line">    &amp;&amp; export GNUPGHOME=<span class="string">"$(mktemp -d)"</span> \</div><div class="line">    &amp;&amp; gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \</div><div class="line">    &amp;&amp; gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \</div><div class="line">    &amp;&amp; rm -r <span class="string">"$GNUPGHOME"</span> /usr/local/bin/gosu.asc \</div><div class="line">    &amp;&amp; chmod +x /usr/local/bin/gosu \</div><div class="line">    &amp;&amp; gosu nobody true \</div><div class="line">    &amp;&amp; apt-get purge -y --auto-remove ca-certificates wget</div><div class="line"></div><div class="line">RUN mkdir /docker-entrypoint-initdb.d</div><div class="line"></div><div class="line"><span class="comment"># FATAL ERROR: please install the following Perl modules before executing /usr/local/mysql/scripts/mysql_install_db:</span></div><div class="line"><span class="comment"># File::Basename</span></div><div class="line"><span class="comment"># File::Copy</span></div><div class="line"><span class="comment"># Sys::Hostname</span></div><div class="line"><span class="comment"># Data::Dumper</span></div><div class="line">RUN apt-get update &amp;&amp; apt-get install -y perl pwgen --no-install-recommends &amp;&amp; rm -rf /var/lib/apt/lists/*</div><div class="line"></div><div class="line"><span class="comment"># gpg: key 5072E1F5: public key "MySQL Release Engineering &lt;mysql-build@oss.oracle.com&gt;" imported</span></div><div class="line">RUN apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys A4A9406876FCBD3C456770C88C718D3B5072E1F5</div><div class="line"></div><div class="line">ENV MYSQL_MAJOR <span class="number">5.6</span></div><div class="line">ENV MYSQL_VERSION <span class="number">5.6</span><span class="number">.31</span><span class="number">-1</span>debian8</div><div class="line"></div><div class="line">RUN echo <span class="string">"deb http://repo.mysql.com/apt/debian/ jessie mysql-$&#123;MYSQL_MAJOR&#125;"</span> &gt; /etc/apt/sources.list.d/mysql.list</div><div class="line"></div><div class="line"><span class="comment"># the "/var/lib/mysql" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already "configured" (ie, stuff in /var/lib/mysql/mysql)</span></div><div class="line"><span class="comment"># also, we set debconf keys to make APT a little quieter</span></div><div class="line">RUN &#123; \</div><div class="line">        echo mysql-community-server mysql-community-server/data-dir select <span class="string">''</span>; \</div><div class="line">        echo mysql-community-server mysql-community-server/root-<span class="keyword">pass</span> password <span class="string">''</span>; \</div><div class="line">        echo mysql-community-server mysql-community-server/re-root-<span class="keyword">pass</span> password <span class="string">''</span>; \</div><div class="line">        echo mysql-community-server mysql-community-server/remove-test-db select false; \</div><div class="line">    &#125; | debconf-set-selections \</div><div class="line">    &amp;&amp; apt-get update &amp;&amp; apt-get install -y mysql-server=<span class="string">"$&#123;MYSQL_VERSION&#125;"</span> &amp;&amp; rm -rf /var/lib/apt/lists/* \</div><div class="line">    &amp;&amp; rm -rf /var/lib/mysql &amp;&amp; mkdir -p /var/lib/mysql /var/run/mysqld \</div><div class="line">    &amp;&amp; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \</div><div class="line"><span class="comment"># ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime</span></div><div class="line">    &amp;&amp; chmod <span class="number">777</span> /var/run/mysqld</div><div class="line"></div><div class="line"><span class="comment"># comment out a few problematic configuration values</span></div><div class="line"><span class="comment"># don't reverse lookup hostnames, they are usually another container</span></div><div class="line">RUN sed -Ei <span class="string">'s/^(bind-address|log)/#&amp;/'</span> /etc/mysql/my.cnf \</div><div class="line">    &amp;&amp; echo <span class="string">'skip-host-cache\nskip-name-resolve'</span> | awk <span class="string">'&#123; print &#125; $1 == "[mysqld]" &amp;&amp; c == 0 &#123; c = 1; system("cat") &#125;'</span> /etc/mysql/my.cnf &gt; /tmp/my.cnf \</div><div class="line">    &amp;&amp; mv /tmp/my.cnf /etc/mysql/my.cnf</div><div class="line"></div><div class="line">VOLUME /var/lib/mysql</div><div class="line"></div><div class="line">COPY docker-entrypoint.sh /usr/local/bin/</div><div class="line">RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh <span class="comment"># backwards compat</span></div><div class="line">ENTRYPOINT [<span class="string">"docker-entrypoint.sh"</span>]</div><div class="line"></div><div class="line">EXPOSE <span class="number">3306</span></div><div class="line">CMD [<span class="string">"mysqld"</span>]</div></pre></td></tr></table></figure><p>通过Dockerfile创建一个镜像，替换成你自己的名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t mysql .</div></pre></td></tr></table></figure><p>创建完成后，我们可以在本地的镜像列表里查找到刚刚创建的镜像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker images |grep mysql</div><div class="line">mysql               <span class="number">5.6</span>                 <span class="number">2</span>c0964ec182a        <span class="number">3</span> weeks ago         <span class="number">329</span> MB</div></pre></td></tr></table></figure><p>方法二、docker pull mysql</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> docker pull mysql:<span class="number">5.6</span></div><div class="line"> </div><div class="line"> docker run -p <span class="number">3306</span>:<span class="number">3306</span> --name mymysql -v $PWD/conf/my.cnf:/etc/mysql/my.cnf -v $PWD/logs:/logs -v $PWD/data:/mysql_data -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span> -d mysql:<span class="number">5.6</span></div><div class="line"> </div><div class="line">命令说明：</div><div class="line"></div><div class="line">    -p <span class="number">3306</span>:<span class="number">3306</span>：将容器的<span class="number">3306</span>端口映射到主机的<span class="number">3306</span>端口</div><div class="line"></div><div class="line">    -v $PWD/conf/my.cnf:/etc/mysql/my.cnf：将主机当前目录下的conf/my.cnf挂载到容器的/etc/mysql/my.cnf</div><div class="line"></div><div class="line">    -v $PWD/logs:/logs：将主机当前目录下的logs目录挂载到容器的/logs</div><div class="line"></div><div class="line">    -v $PWD/data:/mysql_data：将主机当前目录下的data目录挂载到容器的/mysql_data</div><div class="line"></div><div class="line">    -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span>：初始化root用户的密码</div></pre></td></tr></table></figure><p>查看容器启动情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps</div></pre></td></tr></table></figure><p>新建两个文件<br>my_master.cnf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> [mysqld]</div><div class="line"></div><div class="line">server_id = <span class="number">1</span></div><div class="line"></div><div class="line">log-bin=mysql-bin</div><div class="line">server-id=<span class="number">2</span></div><div class="line">binlog-ignore-db=information_schema</div><div class="line">binlog-ignore-db=cluster</div><div class="line">binlog-ignore-db=mysql</div><div class="line">binlog-do-db=test</div><div class="line"> </div><div class="line"></div><div class="line">!includedir /etc/mysql/conf.d/</div><div class="line"></div><div class="line">!includedir /etc/mysql/mysql.conf.d/</div></pre></td></tr></table></figure><p>my_slave.cnf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line"></div><div class="line">log-bin=mysql-bin</div><div class="line">server-id=<span class="number">3</span></div><div class="line">binlog-ignore-db=information_schema</div><div class="line">binlog-ignore-db=cluster</div><div class="line">binlog-ignore-db=mysql</div><div class="line">replicate-do-db=test</div><div class="line">replicate-ignore-db=mysql</div><div class="line">log-slave-updates</div><div class="line">slave-skip-errors=all</div><div class="line">slave-net-timeout=<span class="number">60</span></div><div class="line"></div><div class="line">!includedir /etc/mysql/conf.d/</div><div class="line"></div><div class="line">!includedir /etc/mysql/mysql.conf.d/</div></pre></td></tr></table></figure><p>##参数的意义可以查看我之前写的文章</p><p>运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// master </div><div class="line">docker run   -d -p <span class="number">3305</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=anech -v my.cnf:/etc/mysql/my.cnf  master_mysql</div><div class="line"></div><div class="line">// salve</div><div class="line">docker run   -d -p <span class="number">3307</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=anech -v /salve/my.cnf:/etc/mysql/my.cnf  slave_mysql</div></pre></td></tr></table></figure><h3 id="随时扣作者QQ-23-9549-9549"><a href="#随时扣作者QQ-23-9549-9549" class="headerlink" title="随时扣作者QQ:23 9549 9549"></a><a href="tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=2395499549&amp;website=www.oicqzone.com" target="_blank" rel="external">随时扣作者QQ:23 9549 9549</a></h3><h3 id="在线聊天作者"><a href="#在线聊天作者" class="headerlink" title="在线聊天作者"></a><a href="tencent://message/?Menu=yes&amp;uin=2395499549&amp;Service=300&amp;sigT=45a1e5847943b64c6ff3990f8a9e644d2b31356cb0b4ac6b24663a3c8dd0f8aa12a595b1714f9d45" target="_blank" rel="external">在线聊天作者</a></h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>SpringCould Ribbon负载均衡和Eureka集群</title>
      <link href="/2017/12/06/Ribbon-001/"/>
      <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> 本文主要介绍 SpringCould 组件   Ribbon , Eureka 实现负载均衡 </div><div class="line">其实实现负载均衡方式有很多</div><div class="line">比如，Nginx LVS ....等</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">概述：</div><div class="line">服务消费端 <span class="number">80</span>（端口）</div><div class="line">服务提供者 <span class="number">8001</span>，<span class="number">8002</span> ，<span class="number">8003</span>  （端口）</div><div class="line">服务注册中心 <span class="number">7001</span>，<span class="number">7003</span>，<span class="number">7003</span>  （端口）</div></pre></td></tr></table></figure><h2 id="微服务架构-建立maven统一管理项目pom项目（springcolud-parent）-追加pom文件-，dependencyManagement进行统一dependencies版本管理"><a href="#微服务架构-建立maven统一管理项目pom项目（springcolud-parent）-追加pom文件-，dependencyManagement进行统一dependencies版本管理" class="headerlink" title="微服务架构 建立maven统一管理项目pom项目（springcolud_parent） 追加pom文件 ，dependencyManagement进行统一dependencies版本管理"></a>微服务架构 建立maven统一管理项目pom项目（springcolud_parent） 追加pom文件 ，dependencyManagement进行统一dependencies版本管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">&lt;groupId&gt;springcolud_parent&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;springcolud_parent&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</div><div class="line"></div><div class="line">&lt;!--规定木jdk 和字符编码 --&gt;</div><div class="line">&lt;properties&gt;</div><div class="line">&lt;jdk.version&gt;1.8&lt;/jdk.version&gt;</div><div class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;dependencyManagement&gt;</div><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;!-- 进行SpringCloud依赖包的导入处理 --&gt;</div><div class="line">&lt;dependency&gt; </div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;Dalston.SR1&lt;/version&gt;</div><div class="line">&lt;type&gt;pom&lt;/type&gt;</div><div class="line">&lt;scope&gt;import&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!-- SpringCloud离不开SpringBoot，所以必须要配置此依赖包 --&gt;</div><div class="line">&lt;dependency&gt; </div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</div><div class="line">&lt;type&gt;pom&lt;/type&gt;</div><div class="line">&lt;scope&gt;import&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;microcloud-api&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;microcloud-api&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;0.0.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;druid&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.1.6&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.2.2&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div><div class="line">&lt;build&gt;</div><div class="line">&lt;finalName&gt;springcolud_parent&lt;/finalName&gt;</div><div class="line">&lt;plugins&gt;</div><div class="line">&lt;plugin&gt;</div><div class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">&lt;!-- 源代码使用的开发版本 --&gt;</div><div class="line">&lt;source&gt;$&#123;jdk.version&#125;&lt;/source&gt;</div><div class="line">&lt;!-- 需要生成的目标class文件的编译版本 --&gt;</div><div class="line">&lt;target&gt;$&#123;jdk.version&#125;&lt;/target&gt;</div><div class="line">&lt;encode&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encode&gt;</div><div class="line">&lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt;</div><div class="line">&lt;!-- -关于SpringCould 打jar文件 无法运行Application程序 --&gt;</div><div class="line"> &lt;plugin&gt;</div><div class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">                    &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;</div><div class="line">                    &lt;executions&gt;</div><div class="line">                        &lt;execution&gt;</div><div class="line">                            &lt;goals&gt;</div><div class="line">                                &lt;goal&gt;repackage&lt;/goal&gt;</div><div class="line">                            &lt;/goals&gt;</div><div class="line">                        &lt;/execution&gt;</div><div class="line">                    &lt;/executions&gt;</div><div class="line">                &lt;/plugin&gt;</div><div class="line"></div><div class="line">&lt;plugin&gt;</div><div class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;2.3.2&lt;/version&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">&lt;source&gt;1.8&lt;/source&gt;</div><div class="line">&lt;target&gt;1.8&lt;/target&gt;</div><div class="line">&lt;encoding&gt;UTF-8&lt;/encoding&gt;</div><div class="line">&lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div><div class="line">&lt;modules&gt;</div><div class="line">&lt;module&gt;microcloud-api&lt;/module&gt;</div><div class="line">&lt;module&gt;microcloud-provider-dept-8001&lt;/module&gt;</div><div class="line">&lt;module&gt;microcloud-provider-dept-8002&lt;/module&gt;</div><div class="line">&lt;module&gt;microcloud-consumer-80&lt;/module&gt;</div><div class="line">&lt;module&gt;microcloud-eureka-7001&lt;/module&gt;</div><div class="line">&lt;module&gt;microcloud-eureka-7002&lt;/module&gt;</div><div class="line">&lt;module&gt;microcloud-eureka-7003&lt;/module&gt;</div><div class="line">&lt;module&gt;microcloud-eureka-7004&lt;/module&gt;</div><div class="line">&lt;/modules&gt;</div><div class="line">&lt;/project&gt;</div><div class="line"></div><div class="line">## 新建   服务器注册中心项目》》Eureka(7001,7003,7004)  追加pom文件 </div><div class="line">```python</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">  &lt;parent&gt;</div><div class="line">    &lt;groupId&gt;springcolud_parent&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;springcolud_parent&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">  &lt;/parent&gt;</div><div class="line">  &lt;artifactId&gt;microcloud-eureka-7004&lt;/artifactId&gt;</div><div class="line">  </div><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure><p>新建   EurekaApplicationStart 服务器启动  @EnableEurekaServer     代表是EurekaServer端<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">package com.jorden.server.eureka;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line">* @ClassName: EurekaApplicationStart</div><div class="line">* @Description: eureka服务注册</div><div class="line">* @author liwenqiang</div><div class="line">* @date <span class="number">2017</span>年<span class="number">12</span>月<span class="number">5</span>日 下午<span class="number">1</span>:<span class="number">02</span>:<span class="number">32</span></div><div class="line">*</div><div class="line"> */</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line">public class EurekaApplicationStart &#123;</div><div class="line"></div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line">SpringApplication.run(EurekaApplicationStart.<span class="keyword">class</span>, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="EnableEurekaServer配置"><a href="#EnableEurekaServer配置" class="headerlink" title="EnableEurekaServer配置"></a>EnableEurekaServer配置</h2><p>  EnableEurekaServer 配置文件 application.yml （eureka-700X.com 为hosts文件127.0.01）<br> spring.application.name 为 Eureka服务注册中心名字 不可重复 其他的 2个 EnableEurekaServer 都一样 改端口就行<br>  defaultZone 这个就是 Eureka集群配置。注册到其他的Eureka服务注册中心<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: <span class="number">7004</span></div><div class="line">  </div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: eureka<span class="number">-7004.</span>com</div><div class="line">  </div><div class="line"><span class="comment">##  eureak实例定义 </span></div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">  <span class="comment">## 定义 Eureka 实例所在的主机名称 </span></div><div class="line">    hostname: eureka<span class="number">-7004.</span>com</div><div class="line">    </div><div class="line">  client:</div><div class="line">      service-url: </div><div class="line">       defaultZone: http://eureka<span class="number">-7001.</span>com:<span class="number">7001</span>/eureka,http://eureka<span class="number">-7003.</span>com:<span class="number">7003</span>/eureka</div><div class="line">      register-<span class="keyword">with</span>-eureka: false  <span class="comment"># 当前的微服务不注册到eureka之中 </span></div><div class="line">      fetch-registry: false  <span class="comment"># 不通过eureka获取注册信息</span></div></pre></td></tr></table></figure></p><h2 id="服务提供-8001-8002-8003-（端口）"><a href="#服务提供-8001-8002-8003-（端口）" class="headerlink" title="服务提供 8001 8002 8003 （端口）"></a>服务提供 8001 8002 8003 （端口）</h2><p>和之前springMCV 一样 提供restful端口<br>@RestController</p><h2 id="配置文件-application-yml-我的orm是mybatis"><a href="#配置文件-application-yml-我的orm是mybatis" class="headerlink" title="配置文件 application.yml  我的orm是mybatis"></a>配置文件 application.yml  我的orm是mybatis</h2><h3 id="如果要做负载均衡-application-name-（-8001-8002-8003）必须一样"><a href="#如果要做负载均衡-application-name-（-8001-8002-8003）必须一样" class="headerlink" title="如果要做负载均衡 application.name  （ 8001 8002 8003）必须一样"></a>如果要做负载均衡 application.name  （ 8001 8002 8003）必须一样</h3><p>instance-id 为是此微服务实例id<br>prefer-ip-address :true 是在服务注册中心是否显示ip<br>eureka.client.defaultZone 为服务注册中心地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server:</div><div class="line">  port: <span class="number">8001</span></div><div class="line">mybatis:</div><div class="line">  config-location: classpath:mybatis/mybatis.cfg.xml    <span class="comment"># mybatis配置文件所在路径</span></div><div class="line">  type-aliases-package: com.jorden.li.domain            <span class="comment"># 定义所有操作类的别名所在包</span></div><div class="line">  mapper-locations:                                     <span class="comment"># 所有的mapper映射文件</span></div><div class="line">  - classpath:mybatis/mapper/*.xml</div><div class="line">spring:</div><div class="line">  datasource:</div><div class="line">    type: com.alibaba.druid.pool.DruidDataSource    <span class="comment"># 配置当前要使用的数据源的操作类型</span></div><div class="line">    driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span>:</span> org.gjt.mm.mysql.Driver      <span class="comment"># 配置MySQL的驱动程序类</span></div><div class="line">    url: jdbc:mysql://localhost:<span class="number">3306</span>/mldn8001           <span class="comment"># 数据库连接地址</span></div><div class="line">    username: root                                  <span class="comment"># 数据库用户名</span></div><div class="line">    password: <span class="number">123456</span>                            <span class="comment"># 数据库连接密码</span></div><div class="line">    dbcp2:                                          <span class="comment"># 进行数据库连接池的配置</span></div><div class="line">      min-idle: <span class="number">5</span>                                   <span class="comment"># 数据库连接池的最小维持连接数    </span></div><div class="line">      initial-size: <span class="number">5</span>                               <span class="comment"># 初始化提供的连接数</span></div><div class="line">      max-total: <span class="number">5</span>                                  <span class="comment"># 最大的连接数</span></div><div class="line">      max-wait-millis: <span class="number">200</span>                          <span class="comment"># 等待连接获取的最大超时时间</span></div><div class="line">  application:</div><div class="line">    name: microcloud-provider-dept  </div><div class="line"></div><div class="line"><span class="comment">## # 客户端进行Eureka注册的配置 </span></div><div class="line">eureka:</div><div class="line">  client:</div><div class="line">     service-url: </div><div class="line">       defaultZone: http://eureka<span class="number">-7001.</span>com:<span class="number">7001</span>/eureka,http://eureka<span class="number">-7003.</span>com:<span class="number">7003</span>/eureka ,http://eureka<span class="number">-7004.</span>com:<span class="number">7004</span>/eureka </div><div class="line">  instance:</div><div class="line">    instance-id: dept<span class="number">-8001.</span>com </div><div class="line">    prefer-ip-address: true</div><div class="line">    lease-renewal-interval-<span class="keyword">in</span>-seconds: <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）   </span></div><div class="line">    lease-expiration-duration-<span class="keyword">in</span>-seconds: <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></div></pre></td></tr></table></figure><h2 id="服务提供-8002-8003-（端口）的项目都一样-改一个-server-port-instance-id-其他的不变"><a href="#服务提供-8002-8003-（端口）的项目都一样-改一个-server-port-instance-id-其他的不变" class="headerlink" title="服务提供  8002 8003 （端口）的项目都一样 改一个  server.port  instance-id 其他的不变"></a>服务提供  8002 8003 （端口）的项目都一样 改一个  server.port  instance-id 其他的不变</h2><p>作者的 rest接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package com.jorden.li.web;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jorden.li.dao.service.IDeptService;</div><div class="line"><span class="keyword">import</span> com.jorden.li.domain.Dept;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line">* @ClassName: DeptRest</div><div class="line">* @Description: TODO(这里用一句话描述这个类的作用)</div><div class="line">* @author liwenqiang</div><div class="line">* @date <span class="number">2017</span>年<span class="number">12</span>月<span class="number">5</span>日 上午<span class="number">11</span>:<span class="number">20</span>:<span class="number">10</span></div><div class="line">*</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line">public class DeptRest &#123;</div><div class="line"><span class="meta">@Resource</span></div><div class="line">private IDeptService deptService;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping(value = "/dept/get/&#123;id&#125;", method = RequestMethod.GET)</span></div><div class="line">public Object get(@PathVariable(<span class="string">"id"</span>) long id) &#123;</div><div class="line"><span class="keyword">return</span> this.deptService.get(id);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping(value = "/dept/add", method = RequestMethod.GET)</span></div><div class="line">public Object add(@RequestBody Dept dept) &#123;</div><div class="line"><span class="keyword">return</span> this.deptService.add(dept);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping(value = "/dept/list", method = RequestMethod.GET)</span></div><div class="line">public Object list() &#123;</div><div class="line"><span class="keyword">return</span> this.deptService.list();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="服务提供服务启动-EnableEurekaClient-必加上"><a href="#服务提供服务启动-EnableEurekaClient-必加上" class="headerlink" title="服务提供服务启动 @EnableEurekaClient 必加上"></a>服务提供服务启动 @EnableEurekaClient 必加上</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.jorden.li;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</div><div class="line"></div><div class="line">/**</div><div class="line"> * microcloud-provider-dept<span class="number">-8001</span></div><div class="line"> * </div><div class="line"> * 启动配置类</div><div class="line"> * @author  wqli</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line">public class ApplicationStart &#123;</div><div class="line"></div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line">SpringApplication.run(ApplicationStart.<span class="keyword">class</span>, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="服务提供服务pom文件"><a href="#服务提供服务pom文件" class="headerlink" title="服务提供服务pom文件"></a>服务提供服务pom文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">&lt;parent&gt;</div><div class="line">&lt;groupId&gt;springcolud_parent&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;springcolud_parent&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;artifactId&gt;microcloud-provider-dept-8001&lt;/artifactId&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;microcloud-api&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;microcloud-api&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;druid&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;logback-core&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line"></div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;springloaded&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure><h2 id="消费者-80"><a href="#消费者-80" class="headerlink" title="消费者 80"></a>消费者 80</h2><p>application.yml 配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">server:</div><div class="line">  port: <span class="number">80</span></div><div class="line"></div><div class="line"><span class="comment">## 服务注册</span></div><div class="line">eureka: </div><div class="line">  client: </div><div class="line">    register-<span class="keyword">with</span>-eureka: false </div><div class="line">    service-url: </div><div class="line">      defaultZone: http://eureka<span class="number">-7001.</span>com:<span class="number">7001</span>/eureka,</div><div class="line">      http://eureka<span class="number">-7003.</span>com:<span class="number">7003</span>/eureka, </div><div class="line">      http://eureka<span class="number">-7004.</span>com:<span class="number">7004</span>/eureka</div></pre></td></tr></table></figure><p>注册到Eureka中心</p><h2 id="消费者-80-rest-配置-LoadBalanced-是为负载均衡注解"><a href="#消费者-80-rest-配置-LoadBalanced-是为负载均衡注解" class="headerlink" title="消费者 80  rest 配置  @LoadBalanced 是为负载均衡注解"></a>消费者 80  rest 配置  @LoadBalanced 是为负载均衡注解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">package com.jorden.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line">* @ClassName: RestConfig</div><div class="line">* @Description: TODO(这里用一句话描述这个类的作用)</div><div class="line">* @author liwenqiang</div><div class="line">* @date <span class="number">2017</span>年<span class="number">12</span>月<span class="number">5</span>日 上午<span class="number">11</span>:<span class="number">13</span>:<span class="number">50</span></div><div class="line">*</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line">public class RestConfig &#123;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line">* @Title: getRestTemplate</div><div class="line">* @Description: TODO(负载均衡配置) @LoadBalanced</div><div class="line">* @param @<span class="keyword">return</span>    设定文件</div><div class="line">* @<span class="keyword">return</span> RestTemplate    返回类型</div><div class="line">* @throws</div><div class="line">* </div><div class="line"> */</div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@LoadBalanced</span></div><div class="line">public RestTemplate getRestTemplate() &#123;</div><div class="line"><span class="keyword">return</span> new RestTemplate();</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="消费者-80-rest接口调用-MICROCLOUD-PROVIDER-DEPT-为微服务-在eureka-注册的名字"><a href="#消费者-80-rest接口调用-MICROCLOUD-PROVIDER-DEPT-为微服务-在eureka-注册的名字" class="headerlink" title="消费者 80  rest接口调用  MICROCLOUD-PROVIDER-DEPT 为微服务 在eureka 注册的名字"></a>消费者 80  rest接口调用  MICROCLOUD-PROVIDER-DEPT 为微服务 在eureka 注册的名字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package com.jorden.web;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.jorden.li.domain.Dept;</div><div class="line"></div><div class="line">/**</div><div class="line"> * </div><div class="line"> * @ClassName: ConsumerDeptController</div><div class="line"> * @Description: TODO(这里用一句话描述这个类的作用)</div><div class="line"> * @author liwenqiang</div><div class="line"> * @date <span class="number">2017</span>年<span class="number">12</span>月<span class="number">5</span>日 上午<span class="number">11</span>:<span class="number">21</span>:<span class="number">23</span></div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line">public class ConsumerDeptController &#123;</div><div class="line">private static String url = <span class="string">"MICROCLOUD-PROVIDER-DEPT"</span>;</div><div class="line"><span class="meta">@Autowired</span></div><div class="line">private RestTemplate restTemplate;</div><div class="line">public static final String DEPT_GET_URL = <span class="string">"http://"</span> + url + <span class="string">"/dept/get/"</span>;</div><div class="line">public static final String DEPT_GETLISGT_URL = <span class="string">"http://"</span> + url + <span class="string">"/dept/list"</span>;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping(value = "/consumer/dept/&#123;id&#125;")</span></div><div class="line">public Object getDept(@PathVariable(<span class="string">"id"</span>) Long id) &#123;</div><div class="line">Dept dept = this.restTemplate.getForObject(DEPT_GET_URL + id, Dept.<span class="keyword">class</span>);</div><div class="line"><span class="keyword">return</span> dept;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="消费者-80-pom文件"><a href="#消费者-80-pom文件" class="headerlink" title="消费者 80 pom文件"></a>消费者 80 pom文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line">&lt;parent&gt;</div><div class="line">&lt;groupId&gt;springcolud_parent&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;springcolud_parent&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;artifactId&gt;microcloud-consumer-80&lt;/artifactId&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line"></div><div class="line">&lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;microcloud-api&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;microcloud-api&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;junit&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;junit&lt;/artifactId&gt;</div><div class="line">&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;springloaded&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure><h2 id="消费者-80-启动-EnableEurekaClient-注解-不要忘记"><a href="#消费者-80-启动-EnableEurekaClient-注解-不要忘记" class="headerlink" title="消费者 80 启动  @EnableEurekaClient 注解 不要忘记"></a>消费者 80 启动  @EnableEurekaClient 注解 不要忘记</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line">public class ApplicationStart &#123;</div><div class="line"></div><div class="line">public static void main(String[] args) throws Exception &#123;</div><div class="line">SpringApplication.run(ApplicationStart.<span class="keyword">class</span>, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>数据库面试相关题目</title>
      <link href="/2017/12/06/SQL-001/"/>
      <content type="html"><![CDATA[<p> 一： 什么是存储过程？有哪些优缺点？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* 存储过程是一个预编译的代码块，执行效率比较高</div><div class="line">* 一个存储过程替代大量T_SQL语句 ，可以降低网络通信量，提高通信速率</div><div class="line">* 可以一定程度上确保数据安全</div></pre></td></tr></table></figure><p> 二： 什么事务？</p><pre><code>事务是数据库维护数据一致性的单位，在每个事务结束时，都能保持数据一致性。</code></pre><p> 三： 什么是存储过程？有哪些优缺点？</p><pre><code>MySQL数据库几个基本的索引类型：普通索引、唯一索引、主键索引（最常用的索引）、全文索引</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* 索引加快数据库的检索速度</div><div class="line">* 索引降低了插入、删除、修改等维护任务的速度</div><div class="line">* 唯一索引可以确保每一行数据的唯一性 比如说:主键索引</div></pre></td></tr></table></figure><p>四：数据库的函数</p><pre><code>1：聚合函数 --- 以下五个 一 SUM（）求和  二 MAX() 求最大 三 MIN() 求最小 四 AVG() 求平均数 五 COUNT() 求总和</code></pre><p>  如果问起其他的函数。就回答这个：<br>    二：日期时间函数<br>        一 CURDATE(),CURRENT_DATE() 返回当前日期</p><p>五： 数据库优化问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">一：硬件优化，提高机器性能，增加硬件等; </div><div class="line">二：优化查询语句，将限定性强的where条件放前</div><div class="line">三：优化索引，建立有效的索引</div><div class="line"></div><div class="line"></div><div class="line">如何继续问这个优化问题，你就说不怎么了解，你知道一个大数据下</div><div class="line">数据库分库分表的问题</div><div class="line">可以举一个最简单的问题：</div><div class="line">上海的公交卡的信息记录</div><div class="line">上海假设就 两千万的人做公交，每天上下班也算上</div><div class="line"></div><div class="line">那么日积月累一个月就是<span class="number">30</span>*两千万。一个数据库根本就不可能</div><div class="line">，你就可以这么说。按照每天分表。</div><div class="line">昨天是<span class="number">20170921</span>一个数据库</div><div class="line">今天是<span class="number">20170921</span>一个数据库</div><div class="line">每天是<span class="number">20170922</span>一个数据库</div><div class="line">这个就是分库。</div><div class="line">  </div><div class="line">分表也是同样的道理</div><div class="line">分表就是表拆开：</div><div class="line"> 经常用的字段一个表 不经常用的放另外一个表。用id关联</div></pre></td></tr></table></figure><h3 id="随时扣作者QQ-23-9549-9549"><a href="#随时扣作者QQ-23-9549-9549" class="headerlink" title="随时扣作者QQ:23 9549 9549"></a><a href="tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=2395499549&amp;website=www.oicqzone.com" target="_blank" rel="external">随时扣作者QQ:23 9549 9549</a></h3><h3 id="在线聊天作者"><a href="#在线聊天作者" class="headerlink" title="在线聊天作者"></a><a href="tencent://message/?Menu=yes&amp;uin=2395499549&amp;Service=300&amp;sigT=45a1e5847943b64c6ff3990f8a9e644d2b31356cb0b4ac6b24663a3c8dd0f8aa12a595b1714f9d45" target="_blank" rel="external">在线聊天作者</a></h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Spring Security开发安全的REST服务</title>
      <link href="/2017/12/06/springScurity/"/>
      <content type="html"><![CDATA[<h3 id="随时扣作者QQ-23-9549-9549"><a href="#随时扣作者QQ-23-9549-9549" class="headerlink" title="随时扣作者QQ:23 9549 9549"></a><a href="tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=2395499549&amp;website=www.oicqzone.com" target="_blank" rel="external">随时扣作者QQ:23 9549 9549</a></h3><h3 id="在线聊天作者"><a href="#在线聊天作者" class="headerlink" title="在线聊天作者"></a><a href="tencent://message/?Menu=yes&amp;uin=2395499549&amp;Service=300&amp;sigT=45a1e5847943b64c6ff3990f8a9e644d2b31356cb0b4ac6b24663a3c8dd0f8aa12a595b1714f9d45" target="_blank" rel="external">在线聊天作者</a></h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Springboot配置swaggerui restFul接口文档</title>
      <link href="/2017/12/06/springboot-swagger2/"/>
      <content type="html"><![CDATA[<h2 id="为什么要使用swaggerui-在线文档。"><a href="#为什么要使用swaggerui-在线文档。" class="headerlink" title="为什么要使用swaggerui 在线文档。"></a>为什么要使用swaggerui 在线文档。</h2><pre><code>1  如果项目才有前后分离的架构方式。ajax交互是必不可免的。当然这就会后台就会提供接口文档这个swaggerui还有可以在线测试 swaggerui基于boostart文档方式。swaggerui也就是最好的选择</code></pre><h2 id="废话不多说，直接上代码"><a href="#废话不多说，直接上代码" class="headerlink" title="废话不多说，直接上代码"></a>废话不多说，直接上代码</h2><p>1： pom.xml。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!--  Spring Boot  版本--&gt;</div><div class="line">   &lt;parent&gt;</div><div class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">       &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</div><div class="line">   &lt;/parent&gt;</div><div class="line">   </div><div class="line"></div><div class="line">   </div><div class="line">       &lt;!--生成api--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;2.7.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;!-- &lt;dependency&gt;</div><div class="line">&lt;groupId&gt;io.springfox&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;2.7.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt; --&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.drore.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;1.4&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>2：配置swaggerui 自动化配置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</div><div class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</div><div class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</div><div class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</div><div class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</div><div class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</div><div class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger2</span></div><div class="line"><span class="meta">@ConditionalOnProperty(prefix = "common",name="enable", matchIfMissing=true)</span></div><div class="line">public class SwaggerConfiguration &#123;</div><div class="line">    ApiInfo apiInfo() &#123;</div><div class="line">        <span class="keyword">return</span> new ApiInfoBuilder()</div><div class="line">                .title(<span class="string">"项目API"</span>)</div><div class="line">                .description(<span class="string">"提供服务端restful在线接口文档，若需求变更,请刷新页面重新获取信息。"</span>)</div><div class="line">                .termsOfServiceUrl(<span class="string">""</span>)</div><div class="line">                .version(<span class="string">"1.0.0"</span>)</div><div class="line">                .contact(new Contact(<span class="string">"lwq"</span>,<span class="string">""</span>,<span class="string">"wqli@ewininfo.com"</span>))</div><div class="line">                .termsOfServiceUrl(<span class="string">"http://localhost:8089/"</span>)</div><div class="line">                .build();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line"><span class="meta">    @Bean</span></div><div class="line"><span class="meta">    @ConditionalOnMissingBean()//容器中如果没有Docket这个类,那么自动配置这个Docket</span></div><div class="line">    public Docket createRestApi() &#123;</div><div class="line">    <span class="keyword">return</span> new Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .apiInfo(apiInfo())</div><div class="line">                .select()// 选择那些路径和api会生成document</div><div class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.company.project.web"</span>))// 对所有包进行监控</div><div class="line">                .paths(PathSelectors.any())// 对所有路径进行监控</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="访问http-ip-port-项目名称-doc-html-可以查看"><a href="#访问http-ip-port-项目名称-doc-html-可以查看" class="headerlink" title="访问http://ip:port/项目名称/doc.html 可以查看"></a>访问<a href="http://ip:port/项目名称/doc.html" target="_blank" rel="external">http://ip:port/项目名称/doc.html</a> 可以查看</h2>]]></content>
      
      
    </entry>
    
    <entry>
      <title>SpringBoot 基于拦截器结合redis实现登录token校验</title>
      <link href="/2017/12/06/springboot-qxlj/"/>
      <content type="html"><![CDATA[<h2 id="为什么要使用redis"><a href="#为什么要使用redis" class="headerlink" title="为什么要使用redis"></a>为什么要使用redis</h2><pre><code>1 redis本身就是一个缓存NOSQL（不仅仅是数据库）型数据库，存储一下json字符串2  效率高查询速度极快3 可以存储一些工程的常量以及一些基础数据    </code></pre><h2 id="为什么要使用token"><a href="#为什么要使用token" class="headerlink" title="为什么要使用token"></a>为什么要使用token</h2><pre><code>1  提高了项目的安全性的问题，一般的项目会采用shiro或者spring security 进行权限校验。 这个问题导致了项目加载速度慢。这些东西也是基础HttpSession来进行存储数据的 比如shiro2 token就是一串加密之后的字符串 。自己可以选择RSA加密，秘钥和私钥以及base64等等。。。    </code></pre><p>##废话不多说，直接上代码</p><blockquote><ul><li>自定义注解</li><li>编写拦截器</li><li>配置拦截器</li><li>代码以及功能测试</li></ul></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">项目添加pom  redis dependency</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.4.7.RELEASE&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>在项目添加自定义注解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package template.mybatis.springboot.authorization.annotation;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 在Controller的方法上使用此注解，该方法在映射时会检查用户是否登录，未登录返回<span class="number">401</span>错误</div><div class="line"> * @author lwq</div><div class="line"> */</div><div class="line"><span class="meta">@Target(ElementType.METHOD)</span></div><div class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></div><div class="line">public @interface Authorization &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Redis管理"><a href="#Redis管理" class="headerlink" title="Redis管理"></a>Redis管理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package template.mybatis.springboot.authorization.manager.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> template.mybatis.springboot.authorization.model.TokenModel;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 对Token进行操作的接口</div><div class="line"> * @author lwq</div><div class="line"> */</div><div class="line">public interface TokenManager &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建一个token关联上指定用户</div><div class="line">     * @param userId 指定用户的id</div><div class="line">     * @<span class="keyword">return</span> 生成的token</div><div class="line">     */</div><div class="line">    public TokenModel createToken(String userId);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 检查token是否有效</div><div class="line">     * @param model token</div><div class="line">     * @<span class="keyword">return</span> 是否有效</div><div class="line">     */</div><div class="line">    public boolean checkToken(String authorization);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 从字符串中解析token</div><div class="line">     * @param authentication 加密后的字符串</div><div class="line">     * @<span class="keyword">return</span></div><div class="line">     */</div><div class="line">    public TokenModel getToken(String authentication);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 清除token</div><div class="line">     * @param userId 登录用户的id</div><div class="line">     */</div><div class="line">    public void deleteToken(String authentication);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">package template.mybatis.springboot.authorization.manager.impl;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.xiaoleilu.hutool.crypto.SecureUtil;</div><div class="line"><span class="keyword">import</span> com.xiaoleilu.hutool.json.JSONUtil;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"><span class="keyword">import</span> template.mybatis.springboot.authorization.model.TokenModel;</div><div class="line"></div><div class="line">/**</div><div class="line"> *  </div><div class="line"> *  token redis Manager</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Data</span></div><div class="line">public class RedisTokenManager implements TokenManager&#123;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line">private RedisTemplate&lt;String, String&gt; redisTemplate;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">public TokenModel createToken(String userId) &#123;</div><div class="line">String token = SecureUtil.simpleUUID();</div><div class="line">TokenModel TokenModel=new TokenModel(userId, token);</div><div class="line">String value = JSONUtil.toJsonStr(TokenModel);</div><div class="line">redisTemplate.boundValueOps(token)</div><div class="line">.set(value, template.mybatis.springboot.model.Constants.TOKEN_EXPIRES_HOUR, TimeUnit.HOURS); //一天过期时间</div><div class="line"><span class="keyword">return</span> TokenModel;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">public boolean checkToken(String token) &#123;</div><div class="line">//</div><div class="line"><span class="keyword">if</span>(!(StringUtils.isEmpty(token)))&#123;</div><div class="line">String json = redisTemplate.boundValueOps(token).get();</div><div class="line">com.xiaoleilu.hutool.json.JSONObject parseObj = JSONUtil.parseObj(json);</div><div class="line">TokenModel bean = parseObj.toBean(TokenModel.<span class="keyword">class</span>);</div><div class="line"><span class="keyword">if</span>(token.equals(bean.getToken()))&#123;</div><div class="line">//程序授权过期时间</div><div class="line"><span class="keyword">return</span> redisTemplate.boundValueOps(token).expire(template.mybatis.springboot.model.Constants.TOKEN_EXPIRES_HOUR, TimeUnit.HOURS);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> false;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">public TokenModel getToken(String authentication) &#123;</div><div class="line">//获取</div><div class="line">String json = redisTemplate.boundValueOps(authentication).get();</div><div class="line">//JSONUtil.</div><div class="line">com.xiaoleilu.hutool.json.JSONObject parseObj = JSONUtil.parseObj(json);</div><div class="line">TokenModel bean = parseObj.toBean(TokenModel.<span class="keyword">class</span>);</div><div class="line"><span class="keyword">return</span> bean;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">public void deleteToken(String authentication) &#123;</div><div class="line">redisTemplate.delete(authentication);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">注释：@Data 采用了lombok  有兴趣的同学可以学习一下，本人觉得非常好呀。</div></pre></td></tr></table></figure><h2 id="编写拦截器"><a href="#编写拦截器" class="headerlink" title="编写拦截器"></a>编写拦截器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line">package template.mybatis.springboot.authorization.interceptor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.druid.util.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> template.mybatis.springboot.authorization.annotation.Authorization;</div><div class="line"><span class="keyword">import</span> template.mybatis.springboot.authorization.manager.impl.TokenManager;</div><div class="line">/**</div><div class="line"> *   </div><div class="line"> *   <span class="number">1</span>，判断请求是否要权限认证 </div><div class="line"> *   <span class="number">2.</span>进行redis权限认证</div><div class="line"> *   </div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line">public class AuthorizationIntercetor extends HandlerInterceptorAdapter &#123;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line">TokenManager redisTokenManager;</div><div class="line"></div><div class="line">/**</div><div class="line"> * This implementation always returns &#123;@code true&#125;.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line">public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</div><div class="line">throws Exception &#123;</div><div class="line">//映射的不是方法</div><div class="line"><span class="keyword">if</span>(!(handler instanceof HandlerMethod))&#123;</div><div class="line"></div><div class="line"><span class="keyword">return</span> true;</div><div class="line">&#125;</div><div class="line">HandlerMethod handlerMethod =(HandlerMethod) handler;</div><div class="line">Method method = handlerMethod.getMethod();</div><div class="line">//得到该处理器是否需要认证</div><div class="line">Authorization annotation = method.getAnnotation(Authorization.<span class="keyword">class</span>);</div><div class="line"><span class="keyword">if</span>(annotation==null)&#123;</div><div class="line"><span class="keyword">return</span> true;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">   String authorization = request.getHeader(template.mybatis.springboot.model.Constants.AUTHORIZATION);</div><div class="line">   <span class="keyword">if</span>(!StringUtils.isEmpty(authorization))&#123;</div><div class="line">   </div><div class="line">   boolean checkToken = redisTokenManager.checkToken(authorization);</div><div class="line">   <span class="keyword">if</span>(checkToken)&#123;</div><div class="line">   <span class="keyword">return</span> true;</div><div class="line">   &#125;<span class="keyword">else</span>&#123;</div><div class="line">   returnJson(response, <span class="string">"授权失败"</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   &#125;<span class="keyword">else</span>&#123;</div><div class="line">   returnJson(response, <span class="string">"该接口未认证或者未签名或者不存在此资源"</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">return</span> true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * This implementation <span class="keyword">is</span> empty.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line">public void postHandle(</div><div class="line">HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</div><div class="line">throws Exception &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * This implementation <span class="keyword">is</span> empty.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line">public void afterCompletion(</div><div class="line">HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</div><div class="line">throws Exception &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * This implementation <span class="keyword">is</span> empty.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line">public void afterConcurrentHandlingStarted(</div><div class="line">HttpServletRequest request, HttpServletResponse response, Object handler)</div><div class="line">throws Exception &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line">     * 异常返回</div><div class="line">     * @param response</div><div class="line">     * @param json</div><div class="line">     * @throws Exception</div><div class="line">     */</div><div class="line">    private void returnJson(HttpServletResponse response, String json) throws Exception&#123;</div><div class="line">        PrintWriter writer = null;</div><div class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            writer = response.getWriter();</div><div class="line">            writer.print(json);</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (writer != null)</div><div class="line">                writer.close();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Controller-代码测试"><a href="#Controller-代码测试" class="headerlink" title="Controller 代码测试"></a>Controller 代码测试</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> template.mybatis.springboot.authorization.manager.impl.TokenManager;</div><div class="line"><span class="keyword">import</span> template.mybatis.springboot.authorization.model.TokenModel;</div><div class="line"><span class="keyword">import</span> template.mybatis.springboot.model.ResultModel;</div><div class="line"><span class="keyword">import</span> template.mybatis.springboot.model.UserInfo;</div><div class="line"><span class="keyword">import</span> template.mybatis.springboot.service.UserInfoService;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author lwq</div><div class="line"> */</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping("/users")</span></div><div class="line">public class UserInfoController &#123;</div><div class="line"></div><div class="line"><span class="meta">    @Autowired</span></div><div class="line">    private UserInfoService userInfoService;</div><div class="line"><span class="meta">    @Autowired</span></div><div class="line">private TokenManager tokenManager;</div><div class="line"></div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 登录以及授权</div><div class="line">     */</div><div class="line"><span class="meta">    @ResponseBody</span></div><div class="line"><span class="meta">    @RequestMapping("/login")</span></div><div class="line">    public ResponseEntity&lt;ResultModel&gt; login(@RequestBody Map&lt;String, String&gt; request ) &#123;</div><div class="line">    UserInfo login = userInfoService.login(request.get(<span class="string">"username"</span>), request.get(<span class="string">"password"</span>));</div><div class="line">    <span class="keyword">if</span>(login!=null)&#123;</div><div class="line">    TokenModel createToken = tokenManager.createToken(request.get(<span class="string">"username"</span>));</div><div class="line">    <span class="keyword">return</span> ResultModel.success(createToken);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> ResultModel.fail(<span class="number">403</span>, <span class="string">"用户名或密码错误"</span>);</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="结果返回success"><a href="#结果返回success" class="headerlink" title="结果返回success"></a>结果返回success</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"code"</span>: <span class="number">100</span>,</div><div class="line">  <span class="string">"message"</span>: <span class="string">"成功"</span>,</div><div class="line">  <span class="string">"data"</span>: &#123;</div><div class="line">    <span class="string">"userId"</span>: <span class="string">"admin"</span>,</div><div class="line">    <span class="string">"token"</span>: <span class="string">"d99fd350c5d94231b017b6a9b1d4f089"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"total"</span>: <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="随时扣作者QQ-23-9549-9549"><a href="#随时扣作者QQ-23-9549-9549" class="headerlink" title="随时扣作者QQ:23 9549 9549"></a><a href="tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=2395499549&amp;website=www.oicqzone.com" target="_blank" rel="external">随时扣作者QQ:23 9549 9549</a></h3><h3 id="在线聊天作者"><a href="#在线聊天作者" class="headerlink" title="在线聊天作者"></a><a href="tencent://message/?Menu=yes&amp;uin=2395499549&amp;Service=300&amp;sigT=45a1e5847943b64c6ff3990f8a9e644d2b31356cb0b4ac6b24663a3c8dd0f8aa12a595b1714f9d45" target="_blank" rel="external">在线聊天作者</a></h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Springboot配置durid SQL 监控</title>
      <link href="/2017/12/06/springboot-durid/"/>
      <content type="html"><![CDATA[<h2 id="为什么要使用durid-SQL-监控"><a href="#为什么要使用durid-SQL-监控" class="headerlink" title="为什么要使用durid SQL 监控"></a>为什么要使用durid SQL 监控</h2><pre><code>1 简单的操作数据库通常涉及datasource,connection,preparedstatement ,ResultSet等东西，如果我要监控这些，必然要建些代理类。</code></pre><h2 id="废话不多说，直接上代码"><a href="#废话不多说，直接上代码" class="headerlink" title="废话不多说，直接上代码"></a>废话不多说，直接上代码</h2><p>1： pom.xml。</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!--  Spring Boot  版本--&gt;</div><div class="line">   &lt;parent&gt;</div><div class="line">       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">       &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</div><div class="line">   &lt;/parent&gt;</div><div class="line">   </div><div class="line">  &lt;!--阿里 Druid Spring Boot Starter依赖--&gt;</div><div class="line">       &lt;dependency&gt;</div><div class="line">           &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">           &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</div><div class="line">           &lt;version&gt;1.1.2&lt;/version&gt;</div><div class="line">       &lt;/dependency&gt;</div></pre></td></tr></table></figure><p>2：添加 Druid的StatFilter<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> </div><div class="line"> </div><div class="line"> <span class="keyword">import</span> javax.servlet.annotation.WebFilter;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Druid的StatFilter</div><div class="line"> *</div><div class="line"> * @author   </div><div class="line"> */</div><div class="line"><span class="meta">@WebFilter(filterName="druidWebStatFilter",urlPatterns="/*",</span></div><div class="line">    initParams=&#123;</div><div class="line"><span class="meta">        @WebInitParam(name="exclusions",value="*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*")// 忽略资源</span></div><div class="line">&#125;)</div><div class="line">public class DruidStatFilter extends WebStatFilter &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3：添加 Druid的StatViewServlet<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</div><div class="line"></div><div class="line">/**</div><div class="line"> * StatViewServlet</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="meta">@SuppressWarnings("serial")</span></div><div class="line"><span class="meta">@WebServlet(urlPatterns = "/druid/*", </span></div><div class="line">    initParams=&#123;</div><div class="line"><span class="meta">            @WebInitParam(name="allow",value="192.168.16.110,127.0.0.1"),// IP白名单 (没有配置或者为空，则允许所有访问)</span></div><div class="line"><span class="meta">            @WebInitParam(name="deny",value="192.168.16.111"),// IP黑名单 (存在共同时，deny优先于allow)</span></div><div class="line"><span class="meta">            @WebInitParam(name="loginUsername",value="admin"),// 用户名</span></div><div class="line"><span class="meta">            @WebInitParam(name="loginPassword",value="admin"),// 密码</span></div><div class="line"><span class="meta">            @WebInitParam(name="resetEnable",value="false")// 禁用HTML页面上的“Reset All”功能</span></div><div class="line">    &#125;)</div><div class="line">public class DruidStatViewServlet extends StatViewServlet &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="访问http-ip-port-项目名称-druid-sql-html-可以查看"><a href="#访问http-ip-port-项目名称-druid-sql-html-可以查看" class="headerlink" title="访问http://ip:port/项目名称/druid/sql.html 可以查看"></a>访问<a href="http://ip:port/项目名称/druid/sql.html" target="_blank" rel="external">http://ip:port/项目名称/druid/sql.html</a> 可以查看</h2>]]></content>
      
      
    </entry>
    
    <entry>
      <title>SpringBoot学习——全局异常处理设置（返回JSON）</title>
      <link href="/2017/12/06/spirngBoot%E5%85%A8%E5%B1%80%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8/"/>
      <content type="html"><![CDATA[<hr><pre><code>## 需求现在习惯使用ajax的方式发起请求，所以经常需要服务端返回一个json或者字符串。控制全局的异常处理。如果在单个方法中使用try，catch把方法包裹起来，工作量大，而且会异常的抛出而导致@Transactional注解的方法事务不会回滚。</code></pre><h2 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h2><pre><code>使用@ControllerAdvice注解使用@ExceptionHandler注解</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div></pre></td></tr></table></figure><h2 id="该注解是spring2-3以后新增的一个注解，主要是用来Controller的一些公共的需求的低侵入性增强提供辅助，作用于-RequestMapping标注的方法上。"><a href="#该注解是spring2-3以后新增的一个注解，主要是用来Controller的一些公共的需求的低侵入性增强提供辅助，作用于-RequestMapping标注的方法上。" class="headerlink" title="该注解是spring2.3以后新增的一个注解，主要是用来Controller的一些公共的需求的低侵入性增强提供辅助，作用于@RequestMapping标注的方法上。"></a>该注解是spring2.3以后新增的一个注解，主要是用来Controller的一些公共的需求的低侵入性增强提供辅助，作用于@RequestMapping标注的方法上。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span></div></pre></td></tr></table></figure><h2 id="该注解是配合-ExceptionHandler一起使用的注解，自定义错误处理器，可自己组装json字符串，并返回到页面。"><a href="#该注解是配合-ExceptionHandler一起使用的注解，自定义错误处理器，可自己组装json字符串，并返回到页面。" class="headerlink" title="该注解是配合@ExceptionHandler一起使用的注解，自定义错误处理器，可自己组装json字符串，并返回到页面。"></a>该注解是配合@ExceptionHandler一起使用的注解，自定义错误处理器，可自己组装json字符串，并返回到页面。</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h2><p>   创建一个全局异常处理类，如下：<br>如果向实现，不同的异常有不同的操作的话，只需要将 @ExceptionHandler的value的值不一样就可以了，可以同时实现多个不同的异常处理，但不能出现包含状态。</p><p> 第一种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line">public class GlobalExceptionHandler &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 所有异常报错</div><div class="line">     * @param request</div><div class="line">     * @param exception</div><div class="line">     * @<span class="keyword">return</span></div><div class="line">     * @throws Exception</div><div class="line">     */</div><div class="line"><span class="meta">    @ExceptionHandler(value=Exception.class)  </span></div><div class="line">    public String allExceptionHandler(HttpServletRequest request,  </div><div class="line">            Exception exception) throws Exception  </div><div class="line">    &#123;  </div><div class="line">        exception.printStackTrace();</div><div class="line">        System.out.println(<span class="string">"我报错了："</span>+exception.getLocalizedMessage());</div><div class="line">        System.out.println(<span class="string">"我报错了："</span>+exception.getCause());</div><div class="line">        System.out.println(<span class="string">"我报错了："</span>+exception.getSuppressed());</div><div class="line">        System.out.println(<span class="string">"我报错了："</span>+exception.getMessage());</div><div class="line">        System.out.println(<span class="string">"我报错了："</span>+exception.getStackTrace());</div><div class="line">        <span class="keyword">return</span> <span class="string">"服务器异常，请联系管理员！"</span>;  </div><div class="line">    &#125;  </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第二种方法（也是我现在用的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.config.FastJsonConfig;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4;</div><div class="line"><span class="keyword">import</span> com.company.project.core.Result;</div><div class="line"><span class="keyword">import</span> com.company.project.core.ResultCode;</div><div class="line"><span class="keyword">import</span> com.company.project.core.ServiceException;</div><div class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.NoHandlerFoundException;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</div><div class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.nio.charset.Charset;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Collections;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="meta">@Configuration</span></div><div class="line">public class WebMvcConfigurer extends WebMvcConfigurerAdapter &#123;</div><div class="line"></div><div class="line">    private final Logger logger = LoggerFactory.getLogger(WebMvcConfigurer.<span class="keyword">class</span>);</div><div class="line"><span class="meta">    @Value("$&#123;spring.profiles.active&#125;")</span></div><div class="line">    private String env;//当前激活的配置文件</div><div class="line"></div><div class="line">    //使用阿里 FastJson 作为JSON MessageConverter</div><div class="line"><span class="meta">    @Override</span></div><div class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</div><div class="line">        FastJsonHttpMessageConverter4 converter = new FastJsonHttpMessageConverter4();</div><div class="line">        FastJsonConfig config = new FastJsonConfig();</div><div class="line">        config.setSerializerFeatures(SerializerFeature.WriteMapNullValue,//保留空的字段</div><div class="line">                SerializerFeature.WriteNullStringAsEmpty,//String null -&gt; ""</div><div class="line">                SerializerFeature.WriteNullNumberAsZero);//Number null -&gt; 0</div><div class="line">        converter.setFastJsonConfig(config);</div><div class="line">        converter.setDefaultCharset(Charset.forName(<span class="string">"UTF-8"</span>));</div><div class="line">        converters.add(converter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    //统一异常处理</div><div class="line"><span class="meta">    @Override</span></div><div class="line">    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; exceptionResolvers) &#123;</div><div class="line">        exceptionResolvers.add(new HandlerExceptionResolver() &#123;</div><div class="line">            public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception e) &#123;</div><div class="line">                Result result = new Result();</div><div class="line">                <span class="keyword">if</span> (e instanceof ServiceException) &#123;//业务失败的异常，如“账号或密码错误”</div><div class="line">                    result.setCode(ResultCode.FAIL).setMessage(e.getMessage());</div><div class="line">                    logger.info(e.getMessage());</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e instanceof NoHandlerFoundException) &#123;</div><div class="line">                    result.setCode(ResultCode.NOT_FOUND).setMessage(<span class="string">"接口 ["</span> + request.getRequestURI() + <span class="string">"] 不存在"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e instanceof ServletException) &#123;</div><div class="line">                    result.setCode(ResultCode.FAIL).setMessage(e.getMessage());</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    result.setCode(ResultCode.INTERNAL_SERVER_ERROR).setMessage(<span class="string">"接口 ["</span> + request.getRequestURI() + <span class="string">"] 内部错误，请联系管理员"</span>);</div><div class="line">                    String message;</div><div class="line">                    <span class="keyword">if</span> (handler instanceof HandlerMethod) &#123;</div><div class="line">                        HandlerMethod handlerMethod = (HandlerMethod) handler;</div><div class="line">                        message = String.format(<span class="string">"接口 [%s] 出现异常，方法：%s.%s，异常摘要：%s"</span>,</div><div class="line">                                request.getRequestURI(),</div><div class="line">                                handlerMethod.getBean().getClass().getName(),</div><div class="line">                                handlerMethod.getMethod().getName(),</div><div class="line">                                e.getMessage());</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        message = e.getMessage();</div><div class="line">                    &#125;</div><div class="line">                    logger.error(message, e);</div><div class="line">                &#125;</div><div class="line">                responseResult(response, result);</div><div class="line">                <span class="keyword">return</span> new ModelAndView();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //解决跨域问题</div><div class="line"><span class="meta">    @Override</span></div><div class="line">    public void addCorsMappings(CorsRegistry registry) &#123;</div><div class="line">        //registry.addMapping(<span class="string">"/**"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //添加拦截器</div><div class="line"><span class="meta">    @Override</span></div><div class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</div><div class="line">        //接口签名认证拦截器，该签名认证比较简单，实际项目中可以使用Json Web Token或其他更好的方式替代。</div><div class="line">        <span class="keyword">if</span> (!<span class="string">"dev"</span>.equals(env)) &#123; //开发环境忽略签名认证</div><div class="line">            registry.addInterceptor(new HandlerInterceptorAdapter() &#123;</div><div class="line"><span class="meta">                @Override</span></div><div class="line">                public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</div><div class="line">                    //验证签名</div><div class="line">                    boolean <span class="keyword">pass</span> = validateSign(request);</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">pass</span>) &#123;</div><div class="line">                        <span class="keyword">return</span> true;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        logger.warn(<span class="string">"签名认证失败，请求接口：&#123;&#125;，请求IP：&#123;&#125;，请求参数：&#123;&#125;"</span>,</div><div class="line">                                request.getRequestURI(), getIpAddress(request), JSON.toJSONString(request.getParameterMap()));</div><div class="line"></div><div class="line">                        Result result = new Result();</div><div class="line">                        result.setCode(ResultCode.UNAUTHORIZED).setMessage(<span class="string">"签名认证失败"</span>);</div><div class="line">                        responseResult(response, result);</div><div class="line">                        <span class="keyword">return</span> false;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void responseResult(HttpServletResponse response, Result result) &#123;</div><div class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</div><div class="line">        response.setHeader(<span class="string">"Content-type"</span>, <span class="string">"application/json;charset=UTF-8"</span>);</div><div class="line">        response.setStatus(<span class="number">200</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            response.getWriter().write(JSON.toJSONString(result));</div><div class="line">        &#125; catch (IOException ex) &#123;</div><div class="line">            logger.error(ex.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 一个简单的签名认证，规则：</div><div class="line">     * <span class="number">1.</span> 将请求参数按ascii码排序</div><div class="line">     * <span class="number">2.</span> 拼接为a=value&amp;b=value...这样的字符串（不包含sign）</div><div class="line">     * <span class="number">3.</span> 混合密钥（secret）进行md5获得签名，与请求的签名进行比较</div><div class="line">     */</div><div class="line">    private boolean validateSign(HttpServletRequest request) &#123;</div><div class="line">        String requestSign = request.getParameter(<span class="string">"sign"</span>);//获得请求签名，如sign=<span class="number">19e907700</span>db7ad91318424a97c54ed57</div><div class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(requestSign)) &#123;</div><div class="line">            <span class="keyword">return</span> false;</div><div class="line">        &#125;</div><div class="line">        List&lt;String&gt; keys = new ArrayList&lt;String&gt;(request.getParameterMap().keySet());</div><div class="line">        keys.remove(<span class="string">"sign"</span>);//排除sign参数</div><div class="line">        Collections.sort(keys);//排序</div><div class="line"></div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        <span class="keyword">for</span> (String key : keys) &#123;</div><div class="line">            sb.append(key).append(<span class="string">"="</span>).append(request.getParameter(key)).append(<span class="string">"&amp;"</span>);//拼接字符串</div><div class="line">        &#125;</div><div class="line">        String linkString = sb.toString();</div><div class="line">        linkString = StringUtils.substring(linkString, <span class="number">0</span>, linkString.length() - <span class="number">1</span>);//去除最后一个<span class="string">'&amp;'</span></div><div class="line"></div><div class="line">        String secret = <span class="string">"Potato"</span>;//密钥，自己修改</div><div class="line">        String sign = DigestUtils.md5Hex(linkString + secret);//混合密钥md5</div><div class="line"></div><div class="line">        <span class="keyword">return</span> StringUtils.equals(sign, requestSign);//比较</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private String getIpAddress(HttpServletRequest request) &#123;</div><div class="line">        String ip = request.getHeader(<span class="string">"x-forwarded-for"</span>);</div><div class="line">        <span class="keyword">if</span> (ip == null || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</div><div class="line">            ip = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ip == null || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</div><div class="line">            ip = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ip == null || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</div><div class="line">            ip = request.getHeader(<span class="string">"HTTP_CLIENT_IP"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ip == null || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</div><div class="line">            ip = request.getHeader(<span class="string">"HTTP_X_FORWARDED_FOR"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (ip == null || ip.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(ip)) &#123;</div><div class="line">            ip = request.getRemoteAddr();</div><div class="line">        &#125;</div><div class="line">        // 如果是多级代理，那么取第一个ip为客户端ip</div><div class="line">        <span class="keyword">if</span> (ip != null &amp;&amp; ip.indexOf(<span class="string">","</span>) != <span class="number">-1</span>) &#123;</div><div class="line">            ip = ip.substring(<span class="number">0</span>, ip.indexOf(<span class="string">","</span>)).trim();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ip;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="随时扣作者QQ-23-9549-9549"><a href="#随时扣作者QQ-23-9549-9549" class="headerlink" title="随时扣作者QQ:23 9549 9549"></a><a href="tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=2395499549&amp;website=www.oicqzone.com" target="_blank" rel="external">随时扣作者QQ:23 9549 9549</a></h3><h3 id="在线聊天作者"><a href="#在线聊天作者" class="headerlink" title="在线聊天作者"></a><a href="tencent://message/?Menu=yes&amp;uin=2395499549&amp;Service=300&amp;sigT=45a1e5847943b64c6ff3990f8a9e644d2b31356cb0b4ac6b24663a3c8dd0f8aa12a595b1714f9d45" target="_blank" rel="external">在线聊天作者</a></h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于SpringCould 打jar文件 无法运行Application程序</title>
      <link href="/2017/12/06/repackage/"/>
      <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">添加 pom plugin</div><div class="line">  &lt;build&gt;</div><div class="line">&lt;plugins&gt;</div><div class="line"> &lt;plugin&gt;</div><div class="line">                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">                    &lt;version&gt;1.5.7.RELEASE&lt;/version&gt;</div><div class="line">                    &lt;executions&gt;</div><div class="line">                        &lt;execution&gt;</div><div class="line">                            &lt;goals&gt;</div><div class="line">                                &lt;goal&gt;repackage&lt;/goal&gt;</div><div class="line">                            &lt;/goals&gt;</div><div class="line">                        &lt;/execution&gt;</div><div class="line">                    &lt;/executions&gt;</div><div class="line">                &lt;/plugin&gt;</div><div class="line"></div><div class="line">&lt;plugin&gt;</div><div class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;2.3.2&lt;/version&gt;</div><div class="line">&lt;configuration&gt;</div><div class="line">&lt;source&gt;1.8&lt;/source&gt;</div><div class="line">&lt;target&gt;1.8&lt;/target&gt;</div><div class="line">&lt;encoding&gt;UTF-8&lt;/encoding&gt;</div><div class="line">&lt;/configuration&gt;</div><div class="line">&lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>MySql数据主从同步(Liunx)</title>
      <link href="/2017/12/06/hello-world/"/>
      <content type="html"><![CDATA[<p>主服务器IP:192.168.1.60</p><p>从服务IP:192.168.1.61</p><p>Linux:centOS</p><p>Mysql版本：5.1.58</p><h2 id="点击进入"><a href="#点击进入" class="headerlink" title="点击进入"></a>点击进入</h2><h6 id="真实项目案例"><a href="#真实项目案例" class="headerlink" title="真实项目案例"></a><a href="http://116.228.10.14:38080/evaluation_web/#/login" target="_blank" rel="external">真实项目案例</a></h6><p>##主从配置原理介绍</p><p>mysql的 主从同步 是一个异步的复制过程，从一个 Master复制到另一个 Slave上。<br>在 Master 与 Slave 之间的实现整个复制过程主要由三个线程来完成，<br>其中两个线程(Sql线程和IO线程)在 Slave 端，<br>另外一个线程(IO线程)在 Master 端。　</p><p><img src="http://hi.csdn.net/attachment/201202/28/0_1330439010P7lI.gif" alt="cmd-markdown-logo"></p><blockquote><p>PS:<code>操作系统和mysql版本必须相同 两台主机网络相通</code></p></blockquote><h2 id="下面介绍Master配置"><a href="#下面介绍Master配置" class="headerlink" title="下面介绍Master配置"></a>下面介绍Master配置</h2><ul><li><p>1<br>vi /etc/my.cnf(默认路径)。根据mysql路径不同而变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Server-id = <span class="number">1</span>  <span class="comment">##这是数据库ID,此ID是唯一的，主库默认为1，其他从库以此ID进行递增，ID值不能重复，否则会同步出错；</span></div><div class="line"></div><div class="line">log-bin = mysql-bin <span class="comment">## 二进制日志文件，此项为必填项，否则不能同步数据；</span></div><div class="line"></div><div class="line">binlog-do-db = testcreate  <span class="comment">#需要同步的数据库，如果需要同步多个数据库；</span></div><div class="line"></div><div class="line"><span class="comment">##则继续添加此项。可选项</span></div><div class="line"></div><div class="line">binlog-do-db = testcreate1</div><div class="line"></div><div class="line">binlog-do-db = testcreate2</div><div class="line"></div><div class="line">binlog-ignore-db = mysql 不需要同步的数据库；</div></pre></td></tr></table></figure></li><li><p>2</p></li></ul><p>运行 service mysqld restart ##重启mysql<br>进入Master Mysql终端命令（mysql -u uname -ppassword）你的mysql用户名和密码</p><ul><li><p>3<br>配置完成后需要建立同步用的数据库账户<br>进入Master Mysql终端命令：<br>grantreplication slave on <em>.</em> to ‘testcreate’@’192.168.1.61’ identified by ‘123456’;</p><p>说明：’testcreate’：同步的数据库；</p><p> ‘192.168.1.61’：同步的数据库地址；</p><p>  ‘123456’ ：同步的数据库密码，在从库配置时需要设置。</p></li></ul><ul><li>4<br>显示主库信息 进入Master Mysql终端命令： showmaster status;<br>显示以下内容代表Master配置成功<br><img src="http://images.cnblogs.com/cnblogs_com/hustcat/mysql/mysql03-2.JPG" alt="cmd-markdown-logo"></li></ul><h2 id="下面介绍Slave配置"><a href="#下面介绍Slave配置" class="headerlink" title="下面介绍Slave配置"></a>下面介绍Slave配置</h2><p>从服务器的配置基本与主库配置差不多，选择的从库服务器为：192.168.1.61</p><ol><li><p>配置从库服务my.cnf文件</p><p>vietc/my.cnf 对其进行如下修改：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Server-id = <span class="number">2</span> <span class="comment">#这里ID改为2 因为主库为1;</span></div><div class="line"></div><div class="line">log-bin = mysql-bin  <span class="comment">####必填项，用于数据同步 ; </span></div><div class="line"></div><div class="line">master-host = <span class="number">192.168</span><span class="number">.1</span><span class="number">.60</span>  <span class="comment">####主库IP;</span></div><div class="line"></div><div class="line">master-user = test  <span class="comment">####同步用的账户;</span></div><div class="line"></div><div class="line">master-password = <span class="number">123456</span>  <span class="comment">####同步账户密码，主库时的设置;</span></div><div class="line"></div><div class="line">master-port = <span class="number">3306</span> <span class="comment">##同步数据库的端口号。</span></div></pre></td></tr></table></figure><ul><li>2</li></ul><p>运行 service mysqld restart ##重启mysql<br>进入Master Mysql终端命令（mysql -u uname -ppassword）你的mysql用户名和密码<br>运行：showslave status\G;  显示如图：</p><p><img src="http://hi.csdn.net/attachment/201112/22/0_1324568301n48v.gif" alt="cmd-markdown-logo"></p><ul><li>3</li></ul><p>如果slave_io_running和slave_sql_running都为yes则表示从服务器配置成功。</p><p>如果遇到关于position相关的错误，就需要再手动设置以下File/Postion的信息</p><p>mysql&gt;Changemaster to master_host = ‘192.168.1.60’</p><p>master_user= ‘test’</p><p>master_password=’123456’</p><p>master_log_file=’mysql-bin.000001’,  主库的文件信息</p><p>master_log_pos=’106’;主库的Position信息</p><ul><li>4 测试</li></ul><p>这个是我测得真实案例：</p><p><img src="http://img.blog.csdn.net/20160506174112818" alt="cmd-markdown-logo"><br><img src="http://img.blog.csdn.net/20160506175740091" alt="cmd-markdown-logo"><br><img src="http://img.blog.csdn.net/20160506174908673" alt="cmd-markdown-logo"></p><p>遇到问题请参照介绍博客：<a href="http://blog.csdn.net/alangmei/article/details/21075055" target="_blank" rel="external">http://blog.csdn.net/alangmei/article/details/21075055</a></p><h3 id="随时扣作者QQ-23-9549-9549"><a href="#随时扣作者QQ-23-9549-9549" class="headerlink" title="随时扣作者QQ:23 9549 9549"></a><a href="tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=2395499549&amp;website=www.oicqzone.com" target="_blank" rel="external">随时扣作者QQ:23 9549 9549</a></h3><h3 id="在线聊天作者"><a href="#在线聊天作者" class="headerlink" title="在线聊天作者"></a><a href="tencent://message/?Menu=yes&amp;uin=2395499549&amp;Service=300&amp;sigT=45a1e5847943b64c6ff3990f8a9e644d2b31356cb0b4ac6b24663a3c8dd0f8aa12a595b1714f9d45" target="_blank" rel="external">在线聊天作者</a></h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用阿里巴巴开源数据库同步工具DATAX实现跨数据库同步</title>
      <link href="/2017/12/06/datax/"/>
      <content type="html"><![CDATA[<blockquote><ul><li>DataX 是阿里巴巴集团内被广泛使用的离线数据同步工具/平台，实现包括<br>MySQL、Oracle、HDFS、Hive、OceanBase、HBase、OTS、ODPS<br>等各种异构数据源之间高效的数据同步功能。</li></ul></blockquote><p> <a href="https://github.com/alibaba/DataX/">点击进入</a></p><h1 id="先请配置DataX-环境变量"><a href="#先请配置DataX-环境变量" class="headerlink" title="先请配置DataX 环境变量"></a>先请配置DataX 环境变量</h1><pre><code>Linux、WindowsJDK(1.8)Python(推荐Python2.6.X)Apache Maven 3.x (Compile DataX)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">下面演示dataX </div><div class="line">配置示例：从MySQL读取数据 写入MYSQL</div><div class="line">（liunx/centos7） 各位学习的童鞋可以自己安装一个VM安装一个liunx系统</div><div class="line"></div><div class="line">演示条件</div><div class="line">mysql_reader <span class="number">47.93</span><span class="number">.226</span><span class="number">.82</span>:<span class="number">3606</span></div><div class="line">mysql_writer <span class="number">47.93</span><span class="number">.226</span><span class="number">.82</span>:<span class="number">3605</span></div><div class="line">安装mysql (作者docker安装mysql )</div><div class="line">docker run -p ip:ip --name mymysql -v $PWD/conf/my.cnf:/etc/mysql/my.cnf -v $PWD/logs:/logs -v $PWD/data:/mysql_data -e MYSQL_ROOT_PASSWORD=<span class="number">123456</span> -d imageid </div><div class="line">-v 是挂载目录</div><div class="line">-p 是开放端口</div></pre></td></tr></table></figure><p>一、工具下载以及部署</p><pre><code>方法一、直接下载DataX工具包(如果仅是使用，推荐直接下载)：DataX下载地址（http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz）下载后解压至本地某个目录，修改权限为755，进入bin目录，即可运行样例同步作业：$ tar zxvf datax.tar.gz$ sudo chmod -R 755 {YOUR_DATAX_HOME}$ cd  {YOUR_DATAX_HOME}/bin$ python datax.py ../job/job.json</code></pre><p>​<br>    二、配置示例：从MySQL读取数据 写入MYSQL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">   &#123;</div><div class="line">    <span class="string">"job"</span>: &#123;</div><div class="line">        <span class="string">"content"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="string">"reader"</span>: &#123;</div><div class="line">                    <span class="string">"name"</span>: <span class="string">"mysqlreader"</span>, </div><div class="line">                    <span class="string">"parameter"</span>: &#123;</div><div class="line">                        <span class="string">"column"</span>: [<span class="string">"id"</span>,<span class="string">"real_name"</span>], </div><div class="line">                        <span class="string">"connection"</span>: [</div><div class="line">                            &#123;</div><div class="line">                    </div><div class="line"> <span class="string">"jdbcUrl"</span>: [</div><div class="line">                                    <span class="string">"jdbc:mysql://47.93.226.82:3306/test"</span></div><div class="line">                                ],</div><div class="line">                                <span class="string">"table"</span>: [<span class="string">"t_ur_user_m"</span>]</div><div class="line">                            &#125;</div><div class="line">                        ], </div><div class="line">                        <span class="string">"password"</span>: <span class="string">"####"</span>, </div><div class="line">                        <span class="string">"username"</span>: <span class="string">"dev@####"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;, </div><div class="line">                <span class="string">"writer"</span>: &#123;</div><div class="line">                    <span class="string">"name"</span>: <span class="string">"mysqlwriter"</span>, </div><div class="line">                    <span class="string">"parameter"</span>: &#123;</div><div class="line">                         <span class="string">"column"</span>: [<span class="string">"id"</span>,<span class="string">"real_name"</span>], </div><div class="line">                        <span class="string">"connection"</span>: [</div><div class="line">                            &#123;</div><div class="line"><span class="string">"jdbcUrl"</span>: <span class="string">"jdbc:mysql://47.93.226.82:3307/test?characterEncoding=utf-8"</span>,</div><div class="line">                                <span class="string">"table"</span>: [<span class="string">"datax_user"</span>]</div><div class="line">                            &#125;</div><div class="line">                        ], </div><div class="line">                        <span class="string">"password"</span>: <span class="string">"####"</span>, </div><div class="line">                        <span class="string">"username"</span>: <span class="string">"dev@####"</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">           </div><div class="line">            </div><div class="line">        ], </div><div class="line">        <span class="string">"setting"</span>: &#123;</div><div class="line">            <span class="string">"speed"</span>: &#123;</div><div class="line">                <span class="string">"channel"</span>: <span class="string">"2"</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第三步：启动DataX<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ cd &#123;YOUR_DATAX_DIR_BIN&#125;</div><div class="line">$ python datax.py ./mysql2odps.json </div><div class="line"></div><div class="line">同步结束，显示日志如下：</div><div class="line"></div><div class="line">...</div><div class="line"><span class="number">2015</span><span class="number">-12</span><span class="number">-17</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">25.263</span> [job<span class="number">-0</span>] INFO  JobContainer - </div><div class="line">任务启动时刻                    : <span class="number">2015</span><span class="number">-12</span><span class="number">-17</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">15</span></div><div class="line">任务结束时刻                    : <span class="number">2015</span><span class="number">-12</span><span class="number">-17</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">25</span></div><div class="line">任务总计耗时                    :                 <span class="number">10</span>s</div><div class="line">任务平均流量                    :              <span class="number">205</span>B/s</div><div class="line">记录写入速度                    :              <span class="number">5</span>rec/s</div><div class="line">读出记录总数                    :                  <span class="number">50</span></div><div class="line">读写失败总数                    :                   <span class="number">0</span></div></pre></td></tr></table></figure></p><p>###三、配置定时任务（Linux环境）：从MySQL读取数据 写入ODPS，通过crontab命令实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">前置条件：安装crond服务,并已启动</div><div class="line"></div><div class="line"><span class="comment">#查看crond服务是否启动，出现以下日志表示已启动</span></div><div class="line">$/sbin/service crond status</div><div class="line"> crond (pid  <span class="number">30742</span>) <span class="keyword">is</span> running...</div></pre></td></tr></table></figure><pre><code> crond (pid  30742) is running...第一步：创建作业的配置文件（json格式） 参考上节内容。这里假设已配置好MySQL到ODPS的配置文件mysql2odps.json第二步：列出列出crontab文件，命令： crontab -l（1）若出现以下日志，表示当前用户没有定时任务，用户需要新建crontab文件，并提交crontab文件，参考第三步。$crontab -l no crontab for xxx</code></pre><p>（2）若出现以下日志，表示当前用户已经有正在运行的定时任务，用户只需用命令crontab -e 来编辑crontab文件，参考第四步。 shell $ crontab -l 0,10,20,35,44,50 <em> </em> <em> </em> python /home/admin/datax3/bin/datax.py /home/admin/mysql2odps.json &gt;&gt;/home/hanfa.shf/log.<code>date +\%Y\%m\%d\%H\%M\%S</code> 2&gt;&amp;1</p><pre><code>第三步：若当前用户没有定时任务（之前从未创建过crontab任务)（1）创建一个新的crontab文件，如取名crondatax示例1：每天13点5分进行同步作业，并把运行日志输出到目录/home/hanfa.shf/下log.运行时间 文件中,如定时运行是在2016-3-26 13:10:13运行的，产生的日志文件名为：log.20160326131023$ vim crondatax#输入以下内容5  13 * * *  python /home/admin/datax3/bin/datax.py /home/admin/mysql2odps.json  &gt;&gt;/home/hanfa.shf/log.`date +\%Y\%m\%d\%H\%M\%S`  2&gt;&amp;1#/home/admin/datax3/bin/datax.py 表示你安装的DataX datax.py所在目录（请替换为您真实的绝对路径目录）；#/home/admin/mysql2odps.json  表示作业的配置文件目录（请替换为您真实的绝对路径目录）；#/home/hanfa.shf/log.`date +\%Y\%m\%d\%H\%M\%S` 表示日志输出位置，并以log.当前时间 命名（请替换为您真实的绝对路径目录）</code></pre><p>（2）提交你刚刚创建的crontab文件 shell $ crontab crondatax #crondatax 你创建的crontab文件名 （3）重启crontab服务 shell $ sudo /etc/init.d/crond restart Stopping crond: [ OK ] Starting crond: [ OK ] （4）在13点5分过后，在日志目录会看到对应的日文件 shell $ ls -al /home/hanfa.shf/ -rw-r–r– 1 hanfa.shf users 12062 Mar 26 13:05 log.20160326130501</p><pre><code>第四步：若当前用户已有定时任务（想继续增加定时任务）（1）编辑已有crontab文件示例2：每10分钟运行一次同步任务,并把运行日志输出到目录/home/hanfa.shf/下log.运行时间 文件中，如定时运行是在2016-3-26 13:10:13运行的，产生的日志文件名为：log.20160326131023$ crontab -e#会进入已有crontab文件编辑界面，继续增加定时任务即可，本示例增加以下内容,并保存0,10,20,30,40,50 * * * *  python /home/admin/datax3/bin/datax.py /home/admin/mysql2odps.json  &gt;&gt;/home/hanfa.shf/log.`date +\%Y\%m\%d\%H\%M\%S`  2&gt;&amp;1</code></pre><p>（2）重启crontab服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">$</span> sudo /etc/init.d/crond restart Stopping crond: [ OK ] Starting crond: [ OK ] ``` （3）用crontab -l 命令检查是否添加成功</div><div class="line"></div><div class="line"><span class="meta"> $</span> crontab -l</div><div class="line">5  13 * * *  python /home/admin/datax3/bin/datax.py /home/admin/mysql2odps.json  &gt;&gt;/home/hanfa.shf/log.`date +\%Y\%m\%d\%H\%M\%S`  2&gt;&amp;1</div><div class="line">0,10,20,30,40,50 * * * *  python /home/admin/datax3/bin/datax.py /home/admin/mysql2odps.json  &gt;&gt;/home/hanfa.shf/log.</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">接下来请根据您所需要的插件完成配置，并完成同步。</div><div class="line"></div><div class="line">所有数据源配置指南，请参考：DataX数据源指南</div><div class="line">附录：</div><div class="line"></div><div class="line">安装crond服务</div><div class="line">yum install crontabs</div><div class="line">服务操作说明：</div><div class="line">/sbin/service crond start //启动服务</div><div class="line">/sbin/service crond stop //关闭服务</div><div class="line">/sbin/service crond restart //重启服务</div><div class="line">/sbin/service crond reload //重新载入配置</div><div class="line">加入开机自动启动：</div><div class="line">/sbin/chkconfig --level 35 crond on</div></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
  
  
</search>
